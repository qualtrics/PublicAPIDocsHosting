{"version":3,"sources":["../../src/schema/node-model.js"],"names":["_","require","isAbstractType","GraphQLOutputType","GraphQLUnionType","GraphQLList","getNamedType","getNullableType","isCompositeType","invariant","reporter","LocalNodeModel","constructor","schema","schemaComposer","nodeStore","createPageDependency","createPageDependencyActionCreator","_rootNodeMap","WeakMap","_trackedRootNodes","Set","_prepareNodesQueues","_prepareNodesPromises","_preparedNodesCache","Map","replaceFiltersCache","createPageDependencyArgs","connection","nodeTypeNames","toNodeTypeNames","forEach","typeName","map","_filtersCache","withContext","context","ContextualNodeModel","getNodeById","args","pageDependencies","id","type","node","result","includes","internal","trackInlineObjectsInRootNode","trackPageDependencies","getNodesByIds","ids","nodes","Array","isArray","filter","Boolean","length","getAllNodes","getNodes","reduce","acc","push","getNodesByType","runQuery","query","firstOnly","stats","tracer","gqlType","getType","materializationActivity","phantomActivity","parentSpan","getParentActivity","span","start","fields","getQueryFields","sort","group","distinct","fieldsToResolve","determineResolvableFields","prepareNodes","end","runQueryActivity","queryResult","queryArgs","gqlSchema","gqlComposer","resolvedFields","filtersCache","trackInlineObjectsActivity","queryFields","name","Promise","resolve","process","nextTick","_doResolvePrepareNodesQueue","queue","nextQueryFields","nextFieldsToResolve","merge","actualFieldsToResolve","deepObjectDifference","get","isEmpty","saveResolvedNodes","resolveRecursive","mergedResolved","__gatsby_resolved","set","getTypes","has","addRootNodeToInlineObject","add","findRootNodeAncestor","obj","predicate","iterations","parent","trackedParent","error","path","connectionType","nodeId","rootNodeModel","nodeModel","_getFullDependencies","fullDependencies","getNode","gqlTypeName","possibleTypes","getPossibleTypes","getInterfaces","some","iface","filterFields","dropQueryOperators","sortFields","pathToObject","split","reduceRight","key","Object","keys","value","k","v","isPlainObject","getFields","concreteType","resolveType","gqlFields","fieldName","fieldToResolve","queryField","gqlField","gqlNonNullType","gqlFieldType","innerValue","resolveField","isObject","all","item","pickBy","withResolverContext","arg","defaultValue","returnType","field","typeComposer","getAnyTC","possibleTCs","needsResolve","tc","getFieldExtension","innerResolved","rootNodeMap","data","isNode","each","o","from","to","toValue","deepResult","module","exports"],"mappings":"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","sourcesContent":["// @flow\n\nconst _ = require(`lodash`)\nconst {\n  isAbstractType,\n  GraphQLOutputType,\n  GraphQLUnionType,\n  GraphQLList,\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n} = require(`graphql`)\nconst invariant = require(`invariant`)\nconst reporter = require(`gatsby-cli/lib/reporter`)\n\ntype TypeOrTypeName = string | GraphQLOutputType\n\n/**\n * Optional page dependency information.\n *\n * @typedef {Object} PageDependencies\n * @property {string} path The path of the page that depends on the retrieved nodes' data\n * @property {string} [connectionType] Mark this dependency as a connection\n */\ninterface PageDependencies {\n  path: string;\n  connectionType?: string;\n}\n\ninterface QueryArguments {\n  type: TypeOrTypeName;\n  query: { filter: Object, sort?: Object };\n  firstOnly?: boolean;\n}\n\nexport interface NodeModel {\n  getNodeById(\n    { id: string, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): any | null;\n  getNodesByIds(\n    { ids: Array<string>, type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  getAllNodes(\n    { type?: TypeOrTypeName },\n    pageDependencies?: PageDependencies\n  ): Array<any>;\n  runQuery(\n    args: QueryArguments,\n    pageDependencies?: PageDependencies\n  ): Promise<any>;\n  getTypes(): Array<string>;\n  trackPageDependencies<nodeOrNodes: Node | Node[]>(\n    result: nodeOrNodes,\n    pageDependencies?: PageDependencies\n  ): nodesOrNodes;\n  findRootNodeAncestor(obj: any, predicate: () => boolean): Node | null;\n  trackInlineObjectsInRootNode(node: Node, sanitize: boolean): Node;\n}\n\nclass LocalNodeModel {\n  constructor({ schema, schemaComposer, nodeStore, createPageDependency }) {\n    this.schema = schema\n    this.schemaComposer = schemaComposer\n    this.nodeStore = nodeStore\n    this.createPageDependencyActionCreator = createPageDependency\n\n    this._rootNodeMap = new WeakMap()\n    this._trackedRootNodes = new Set()\n    this._prepareNodesQueues = {}\n    this._prepareNodesPromises = {}\n    this._preparedNodesCache = new Map()\n    this.replaceFiltersCache()\n  }\n\n  createPageDependency(createPageDependencyArgs) {\n    if (createPageDependencyArgs.connection) {\n      const nodeTypeNames = toNodeTypeNames(\n        this.schema,\n        createPageDependencyArgs.connection\n      )\n      if (nodeTypeNames) {\n        nodeTypeNames.forEach(typeName => {\n          this.createPageDependencyActionCreator({\n            ...createPageDependencyArgs,\n            connection: typeName,\n          })\n        })\n        return\n      }\n    }\n\n    this.createPageDependencyActionCreator(createPageDependencyArgs)\n  }\n\n  /**\n   * Replace the cache either with the value passed on (mainly for tests) or\n   * an empty new Map.\n   *\n   * @param {undefined | null | FiltersCache} map\n   *   (This cached is used in redux/nodes.js and caches a set of buckets (Sets)\n   *   of Nodes based on filter and tracks this for each set of types which are\n   *   actually queried. If the filter targets `id` directly, only one Node is\n   *   cached instead of a Set of Nodes. If null, don't create or use a cache.\n   */\n  replaceFiltersCache(map = new Map()) {\n    this._filtersCache = map // See redux/nodes.js for usage\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this, context)\n  }\n\n  /**\n   * Get a node from the store by ID and optional type.\n   *\n   * @param {Object} args\n   * @param {string} args.id ID of the requested node\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {(Node|null)}\n   */\n  getNodeById(args, pageDependencies) {\n    const { id, type } = args || {}\n\n    const node = getNodeById(this.nodeStore, id)\n\n    let result\n    if (!node) {\n      result = null\n    } else if (!type) {\n      result = node\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodeTypeNames.includes(node.internal.type) ? node : null\n    }\n\n    if (result) {\n      this.trackInlineObjectsInRootNode(node)\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  /**\n   * Get nodes from the store by IDs and optional type.\n   *\n   * @param {Object} args\n   * @param {string[]} args.ids IDs of the requested nodes\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getNodesByIds(args, pageDependencies) {\n    const { ids, type } = args || {}\n\n    const nodes = Array.isArray(ids)\n      ? ids.map(id => getNodeById(this.nodeStore, id)).filter(Boolean)\n      : []\n\n    let result\n    if (!nodes.length || !type) {\n      result = nodes\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type. Note that\n   * this doesn't add tracking to all the nodes, unless pageDependencies are\n   * passed.\n   *\n   * @param {Object} args\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   */\n  getAllNodes(args, pageDependencies) {\n    const { type } = args || {}\n\n    let result\n    if (!type) {\n      result = this.nodeStore.getNodes()\n    } else {\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      const nodes = nodeTypeNames.reduce((acc, typeName) => {\n        acc.push(...this.nodeStore.getNodesByType(typeName))\n        return acc\n      }, [])\n      result = nodes.filter(Boolean)\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (pageDependencies) {\n      return this.trackPageDependencies(result, pageDependencies)\n    } else {\n      return result\n    }\n  }\n\n  /**\n   * Get nodes of a type matching the specified query.\n   *\n   * @param {Object} args\n   * @param {Object} args.query Query arguments (`filter` and `sort`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {boolean} [args.firstOnly] If true, return only first match\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node[]>}\n   */\n  async runQuery(args, pageDependencies) {\n    const { query, firstOnly, type, stats, tracer } = args || {}\n\n    // We don't support querying union types (yet?), because the combined types\n    // need not have any fields in common.\n    const gqlType = typeof type === `string` ? this.schema.getType(type) : type\n    invariant(\n      !(gqlType instanceof GraphQLUnionType),\n      `Querying GraphQLUnion types is not supported.`\n    )\n\n    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)\n\n    let materializationActivity\n    if (tracer) {\n      materializationActivity = reporter.phantomActivity(`Materialization`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      materializationActivity.start()\n    }\n    const fields = getQueryFields({\n      filter: query.filter,\n      sort: query.sort,\n      group: query.group,\n      distinct: query.distinct,\n    })\n    const fieldsToResolve = determineResolvableFields(\n      this.schemaComposer,\n      this.schema,\n      gqlType,\n      fields,\n      nodeTypeNames\n    )\n\n    await this.prepareNodes(gqlType, fields, fieldsToResolve, nodeTypeNames)\n\n    if (materializationActivity) {\n      materializationActivity.end()\n    }\n\n    let runQueryActivity\n    if (tracer) {\n      runQueryActivity = reporter.phantomActivity(`runQuery`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      runQueryActivity.start()\n    }\n\n    const queryResult = await this.nodeStore.runQuery({\n      queryArgs: query,\n      firstOnly,\n      gqlSchema: this.schema,\n      gqlComposer: this.schemaComposer,\n      gqlType,\n      resolvedFields: fieldsToResolve,\n      nodeTypeNames,\n      filtersCache: this._filtersCache,\n      stats,\n    })\n\n    if (runQueryActivity) {\n      runQueryActivity.end()\n    }\n\n    let trackInlineObjectsActivity\n    if (tracer) {\n      trackInlineObjectsActivity = reporter.phantomActivity(\n        `trackInlineObjects`,\n        {\n          parentSpan: tracer.getParentActivity().span,\n        }\n      )\n      trackInlineObjectsActivity.start()\n    }\n\n    let result = queryResult\n    if (firstOnly) {\n      if (result?.length > 0) {\n        result = result[0]\n        this.trackInlineObjectsInRootNode(result)\n      } else {\n        result = null\n      }\n    } else if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    if (trackInlineObjectsActivity) {\n      trackInlineObjectsActivity.end()\n    }\n\n    return this.trackPageDependencies(result, pageDependencies)\n  }\n\n  prepareNodes(type, queryFields, fieldsToResolve, nodeTypeNames) {\n    const typeName = type.name\n    if (!this._prepareNodesQueues[typeName]) {\n      this._prepareNodesQueues[typeName] = []\n    }\n\n    this._prepareNodesQueues[typeName].push({\n      queryFields,\n      fieldsToResolve,\n    })\n\n    if (!this._prepareNodesPromises[typeName]) {\n      this._prepareNodesPromises[typeName] = new Promise(resolve => {\n        process.nextTick(async () => {\n          await this._doResolvePrepareNodesQueue(type, nodeTypeNames)\n          resolve()\n        })\n      })\n    }\n\n    return this._prepareNodesPromises[typeName]\n  }\n\n  async _doResolvePrepareNodesQueue(type, nodeTypeNames) {\n    const typeName = type.name\n    const queue = this._prepareNodesQueues[typeName]\n    this._prepareNodesQueues[typeName] = []\n    this._prepareNodesPromises[typeName] = null\n\n    const { queryFields, fieldsToResolve } = queue.reduce(\n      (\n        { queryFields, fieldsToResolve },\n        { queryFields: nextQueryFields, fieldsToResolve: nextFieldsToResolve }\n      ) => {\n        return {\n          queryFields: _.merge(queryFields, nextQueryFields),\n          fieldsToResolve: _.merge(fieldsToResolve, nextFieldsToResolve),\n        }\n      },\n      {\n        queryFields: {},\n        fieldsToResolve: {},\n      }\n    )\n\n    const actualFieldsToResolve = deepObjectDifference(\n      fieldsToResolve,\n      this._preparedNodesCache.get(typeName) || {}\n    )\n\n    if (!_.isEmpty(actualFieldsToResolve)) {\n      await this.nodeStore.saveResolvedNodes(nodeTypeNames, async node => {\n        this.trackInlineObjectsInRootNode(node)\n        const resolvedFields = await resolveRecursive(\n          this,\n          this.schemaComposer,\n          this.schema,\n          node,\n          type,\n          queryFields,\n          actualFieldsToResolve\n        )\n        const mergedResolved = _.merge(\n          node.__gatsby_resolved || {},\n          resolvedFields\n        )\n        return mergedResolved\n      })\n      this._preparedNodesCache.set(\n        typeName,\n        _.merge(\n          {},\n          this._preparedNodesCache.get(typeName) || {},\n          actualFieldsToResolve\n        )\n      )\n    }\n  }\n\n  /**\n   * Get the names of all node types in the store.\n   *\n   * @returns {string[]}\n   */\n  getTypes() {\n    return this.nodeStore.getTypes()\n  }\n\n  /**\n   * Adds link between inline objects/arrays contained in Node object\n   * and that Node object.\n   * @param {Node} node Root Node\n   */\n  trackInlineObjectsInRootNode(node) {\n    if (!this._trackedRootNodes.has(node.id)) {\n      addRootNodeToInlineObject(\n        this._rootNodeMap,\n        node,\n        node.id,\n        true,\n        new Set()\n      )\n      this._trackedRootNodes.add(node.id)\n    }\n  }\n\n  /**\n   * Finds top most ancestor of node that contains passed Object or Array\n   * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n   * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n   * @returns {Node} Top most ancestor if predicate is not specified\n   * or first node that meet predicate conditions if predicate is specified\n   */\n  findRootNodeAncestor(obj, predicate = null) {\n    let iterations = 0\n    let node = obj\n\n    while (iterations++ < 100) {\n      if (predicate && predicate(node)) return node\n\n      const parent = node.parent && getNodeById(this.nodeStore, node.parent)\n      const id = this._rootNodeMap.get(node)\n      const trackedParent = id && getNodeById(this.nodeStore, id)\n\n      if (!parent && !trackedParent) return node\n\n      node = parent || trackedParent\n    }\n\n    reporter.error(\n      `It looks like you have a node that's set its parent as itself:\\n\\n` +\n        node\n    )\n    return null\n  }\n\n  /**\n   * Given a result, that's either a single node or an array of them, track them\n   * using pageDependencies. Defaults to tracking according to current resolver\n   * path. Returns the result back.\n   *\n   * @param {Node | Node[]} result\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node | Node[]}\n   */\n  trackPageDependencies(result, pageDependencies = {}) {\n    const { path, connectionType } = pageDependencies\n    if (path) {\n      if (connectionType) {\n        this.createPageDependency({ path, connection: connectionType })\n      } else {\n        const nodes = Array.isArray(result) ? result : [result]\n        for (const node of nodes) {\n          if (node) {\n            this.createPageDependency({ path, nodeId: node.id })\n          }\n        }\n      }\n    }\n\n    return result\n  }\n}\n\nclass ContextualNodeModel {\n  constructor(rootNodeModel, context) {\n    this.nodeModel = rootNodeModel\n    this.context = context\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this.nodeModel, {\n      ...this.context,\n      ...context,\n    })\n  }\n\n  _getFullDependencies(pageDependencies) {\n    return {\n      path: this.context.path,\n      ...(pageDependencies || {}),\n    }\n  }\n\n  getNodeById(args, pageDependencies) {\n    return this.nodeModel.getNodeById(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getNodesByIds(args, pageDependencies) {\n    return this.nodeModel.getNodesByIds(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getAllNodes(args, pageDependencies) {\n    const fullDependencies = pageDependencies\n      ? this._getFullDependencies(pageDependencies)\n      : null\n    return this.nodeModel.getAllNodes(args, fullDependencies)\n  }\n\n  runQuery(args, pageDependencies) {\n    return this.nodeModel.runQuery(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  prepareNodes(...args) {\n    return this.nodeModel.prepareNodes(...args)\n  }\n\n  getTypes(...args) {\n    return this.nodeModel.getTypes(...args)\n  }\n\n  trackInlineObjectsInRootNode(...args) {\n    return this.nodeModel.trackInlineObjectsInRootNode(...args)\n  }\n\n  findRootNodeAncestor(...args) {\n    return this.nodeModel.findRootNodeAncestor(...args)\n  }\n\n  createPageDependency(...args) {\n    return this.nodeModel.createPageDependency(...args)\n  }\n\n  trackPageDependencies(result, pageDependencies) {\n    return this.nodeModel.trackPageDependencies(\n      result,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n}\n\nconst getNodeById = (nodeStore, id) =>\n  id != null ? nodeStore.getNode(id) : null\n\nconst toNodeTypeNames = (schema, gqlTypeName) => {\n  const gqlType =\n    typeof gqlTypeName === `string` ? schema.getType(gqlTypeName) : gqlTypeName\n\n  if (!gqlType) return []\n\n  const possibleTypes = isAbstractType(gqlType)\n    ? schema.getPossibleTypes(gqlType)\n    : [gqlType]\n\n  return possibleTypes\n    .filter(type => type.getInterfaces().some(iface => iface.name === `Node`))\n    .map(type => type.name)\n}\n\nconst getQueryFields = ({ filter, sort, group, distinct }) => {\n  const filterFields = filter ? dropQueryOperators(filter) : {}\n  const sortFields = (sort && sort.fields) || []\n\n  if (group && !Array.isArray(group)) {\n    group = [group]\n  } else if (group == null) {\n    group = []\n  }\n\n  if (distinct && !Array.isArray(distinct)) {\n    distinct = [distinct]\n  } else if (distinct == null) {\n    distinct = []\n  }\n\n  return _.merge(\n    filterFields,\n    ...sortFields.map(pathToObject),\n    ...group.map(pathToObject),\n    ...distinct.map(pathToObject)\n  )\n}\n\nconst pathToObject = path => {\n  if (path && typeof path === `string`) {\n    return path.split(`.`).reduceRight((acc, key) => {\n      return { [key]: acc }\n    }, true)\n  }\n  return {}\n}\n\nconst dropQueryOperators = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    const k = Object.keys(value)[0]\n    const v = value[k]\n    if (_.isPlainObject(value) && _.isPlainObject(v)) {\n      acc[key] =\n        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)\n    } else {\n      acc[key] = true\n    }\n    return acc\n  }, {})\n\nconst getFields = (schema, type, node) => {\n  if (!isAbstractType(type)) {\n    return type.getFields()\n  }\n\n  const concreteType = type.resolveType(node)\n  return schema.getType(concreteType).getFields()\n}\n\nasync function resolveRecursive(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  type,\n  queryFields,\n  fieldsToResolve\n) {\n  const gqlFields = getFields(schema, type, node)\n  const resolvedFields = {}\n  for (const fieldName of Object.keys(fieldsToResolve)) {\n    const fieldToResolve = fieldsToResolve[fieldName]\n    const queryField = queryFields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlNonNullType = getNullableType(gqlField.type)\n    const gqlFieldType = getNamedType(gqlField.type)\n    let innerValue\n    if (gqlField.resolve) {\n      innerValue = await resolveField(\n        nodeModel,\n        schemaComposer,\n        schema,\n        node,\n        gqlField,\n        fieldName\n      )\n    } else {\n      innerValue = node[fieldName]\n    }\n    if (gqlField && innerValue != null) {\n      if (\n        isCompositeType(gqlFieldType) &&\n        !(gqlNonNullType instanceof GraphQLList)\n      ) {\n        innerValue = await resolveRecursive(\n          nodeModel,\n          schemaComposer,\n          schema,\n          innerValue,\n          gqlFieldType,\n          queryField,\n          _.isObject(fieldToResolve) ? fieldToResolve : queryField\n        )\n      } else if (\n        isCompositeType(gqlFieldType) &&\n        _.isArray(innerValue) &&\n        gqlNonNullType instanceof GraphQLList\n      ) {\n        innerValue = await Promise.all(\n          innerValue.map(item =>\n            resolveRecursive(\n              nodeModel,\n              schemaComposer,\n              schema,\n              item,\n              gqlFieldType,\n              queryField,\n              _.isObject(fieldToResolve) ? fieldToResolve : queryField\n            )\n          )\n        )\n      }\n    }\n    if (innerValue != null) {\n      resolvedFields[fieldName] = innerValue\n    }\n  }\n\n  Object.keys(queryFields).forEach(key => {\n    if (!fieldsToResolve[key] && node[key]) {\n      resolvedFields[key] = node[key]\n    }\n  })\n\n  return _.pickBy(resolvedFields, (value, key) => queryFields[key])\n}\n\nfunction resolveField(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  gqlField,\n  fieldName\n) {\n  const withResolverContext = require(`./context`)\n  return gqlField.resolve(\n    node,\n    gqlField.args.reduce((acc, arg) => {\n      acc[arg.name] = arg.defaultValue\n      return acc\n    }, {}),\n    withResolverContext({\n      schema,\n      schemaComposer,\n      nodeModel,\n    }),\n    {\n      fieldName,\n      schema,\n      returnType: gqlField.type,\n    }\n  )\n}\n\nconst determineResolvableFields = (\n  schemaComposer,\n  schema,\n  type,\n  fields,\n  nodeTypeNames\n) => {\n  const fieldsToResolve = {}\n  const gqlFields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlFieldType = getNamedType(gqlField.type)\n    const typeComposer = schemaComposer.getAnyTC(type.name)\n    const possibleTCs = [\n      typeComposer,\n      ...nodeTypeNames.map(name => schemaComposer.getAnyTC(name)),\n    ]\n    let needsResolve = false\n    for (const tc of possibleTCs) {\n      needsResolve = tc.getFieldExtension(fieldName, `needsResolve`) || false\n      if (needsResolve) {\n        break\n      }\n    }\n\n    if (_.isObject(field) && gqlField) {\n      const innerResolved = determineResolvableFields(\n        schemaComposer,\n        schema,\n        gqlFieldType,\n        field,\n        toNodeTypeNames(schema, gqlFieldType)\n      )\n      if (!_.isEmpty(innerResolved)) {\n        fieldsToResolve[fieldName] = innerResolved\n      }\n    }\n\n    if (!fieldsToResolve[fieldName] && needsResolve) {\n      fieldsToResolve[fieldName] = true\n    }\n  })\n  return fieldsToResolve\n}\n\nconst addRootNodeToInlineObject = (\n  rootNodeMap,\n  data,\n  nodeId,\n  isNode /* : boolean */,\n  path /* : Set<mixed> */\n) /* : void */ => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return\n    path.add(data)\n\n    _.each(data, (o, key) => {\n      if (!isNode || key !== `internal`) {\n        addRootNodeToInlineObject(rootNodeMap, o, nodeId, false, path)\n      }\n    })\n\n    // don't need to track node itself\n    if (!isNode) {\n      rootNodeMap.set(data, nodeId)\n    }\n  }\n}\n\nconst deepObjectDifference = (from, to) => {\n  const result = {}\n  Object.keys(from).forEach(key => {\n    const toValue = to[key]\n    if (toValue) {\n      if (_.isPlainObject(toValue)) {\n        const deepResult = deepObjectDifference(from[key], toValue)\n        if (!_.isEmpty(deepResult)) {\n          result[key] = deepResult\n        }\n      }\n    } else {\n      result[key] = from[key]\n    }\n  })\n  return result\n}\n\nmodule.exports = {\n  LocalNodeModel,\n}\n"],"file":"node-model.js"}