{"version":3,"sources":["../../src/utils/source-nodes.ts"],"names":["deleteNode","boundActionCreators","discoverPluginsWithoutNodes","storeState","nodes","nodeOwnerSet","Set","forEach","node","add","internal","owner","flattenedPlugins","filter","plugin","nodeAPIs","includes","has","name","map","warnForPluginsWithoutNodes","state","pluginsWithNoNodes","report","warn","getStaleNodes","rootNode","whileCount","parent","undefined","console","log","nodesTouched","id","deleteStaleNodes","staleNodes","length","webhookBody","parentSpan","traceId","waitForCascadingActions","store","getState"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAiBC,4BAAvB;;AAGA;;;;AAIA,SAASC,2BAAT,CACEC,UADF,EAEEC,KAFF,EAGY;AACV;AACA,QAAMC,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAAE,qBAAF,CAAR,CAArB;AACAF,EAAAA,KAAK,CAACG,OAAN,CAAcC,IAAI,IAAIH,YAAY,CAACI,GAAb,CAAiBD,IAAI,CAACE,QAAL,CAAcC,KAA/B,CAAtB;AAEA,SAAOR,UAAU,CAACS,gBAAX,CACJC,MADI,CAEHC,MAAM,IACJ;AACAA,EAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAA0B,aAA1B,KACA;AACA,GAACX,YAAY,CAACY,GAAb,CAAiBH,MAAM,CAACI,IAAxB,CANA,EAQJC,GARI,CAQAL,MAAM,IAAIA,MAAM,CAACI,IARjB,CAAP;AASD;AAED;;;;;AAGA,SAASE,0BAAT,CAAoCC,KAApC,EAAyDjB,KAAzD,EAA8E;AAC5E,QAAMkB,kBAAkB,GAAGpB,2BAA2B,CAACmB,KAAD,EAAQjB,KAAR,CAAtD;AAEAkB,EAAAA,kBAAkB,CAACH,GAAnB,CAAuBD,IAAI,IACzBK,kBAAOC,IAAP,CACG,OAAMN,IAAK,wDADd,CADF;AAKD;AAED;;;;;AAGA,SAASO,aAAT,CAAuBJ,KAAvB,EAA4CjB,KAA5C,EAAmE;AACjE,SAAOA,KAAK,CAACS,MAAN,CAAaL,IAAI,IAAI;AAC1B,QAAIkB,QAAQ,GAAGlB,IAAf;AACA,QAAImB,UAAU,GAAG,CAAjB;;AACA,WACED,QAAQ,CAACE,MAAT,IACA,oBAAQF,QAAQ,CAACE,MAAjB,MAA6BC,SAD7B,IAEAF,UAAU,GAAG,GAHf,EAIE;AACAD,MAAAA,QAAQ,GAAG,oBAAQA,QAAQ,CAACE,MAAjB,CAAX;AACAD,MAAAA,UAAU,IAAI,CAAd;;AACA,UAAIA,UAAU,GAAG,GAAjB,EAAsB;AACpBG,QAAAA,OAAO,CAACC,GAAR,CACG,+DADH,EAEEL,QAFF;AAID;AACF;;AAED,WAAO,CAACL,KAAK,CAACW,YAAN,CAAmBf,GAAnB,CAAuBS,QAAQ,CAACO,EAAhC,CAAR;AACD,GAnBM,CAAP;AAoBD;AAED;;;;;AAGA,SAASC,gBAAT,CAA0Bb,KAA1B,EAA+CjB,KAA/C,EAAoE;AAClE,QAAM+B,UAAU,GAAGV,aAAa,CAACJ,KAAD,EAAQjB,KAAR,CAAhC;;AAEA,MAAI+B,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzBD,IAAAA,UAAU,CAAC5B,OAAX,CAAmBC,IAAI,IAAIR,UAAU,CAAC;AAAEQ,MAAAA;AAAF,KAAD,CAArC;AACD;AACF;;eAEc,OAAO;AACpB6B,EAAAA,WADoB;AAEpBC,EAAAA;AAFoB,CAAP,KAMM;AACnB,QAAM,4BAAW,aAAX,EAAyB;AAC7BC,IAAAA,OAAO,EAAG,qBADmB;AAE7BC,IAAAA,uBAAuB,EAAE,IAFI;AAG7BF,IAAAA,UAH6B;AAI7BD,IAAAA,WAAW,EAAEA,WAAW,IAAI;AAJC,GAAzB,CAAN;;AAOA,QAAMhB,KAAK,GAAGoB,aAAMC,QAAN,EAAd;;AACA,QAAMtC,KAAK,GAAG,sBAAd;AAEAgB,EAAAA,0BAA0B,CAACC,KAAD,EAAQjB,KAAR,CAA1B;AAEA8B,EAAAA,gBAAgB,CAACb,KAAD,EAAQjB,KAAR,CAAhB;AACD,C","sourcesContent":["import report from \"gatsby-cli/lib/reporter\"\nimport { Span } from \"opentracing\"\nimport apiRunner from \"./api-runner-node\"\nimport { store } from \"../redux\"\nimport { getNode, getNodes } from \"../db/nodes\"\nimport { boundActionCreators } from \"../redux/actions\"\nimport { IGatsbyState } from \"../redux/types\"\nconst { deleteNode } = boundActionCreators\n\nimport { Node } from \"../../index\"\n/**\n * Finds the name of all plugins which implement Gatsby APIs that\n * may create nodes, but which have not actually created any nodes.\n */\nfunction discoverPluginsWithoutNodes(\n  storeState: IGatsbyState,\n  nodes: Node[]\n): string[] {\n  // Find out which plugins own already created nodes\n  const nodeOwnerSet = new Set([`default-site-plugin`])\n  nodes.forEach(node => nodeOwnerSet.add(node.internal.owner))\n\n  return storeState.flattenedPlugins\n    .filter(\n      plugin =>\n        // \"Can generate nodes\"\n        plugin.nodeAPIs.includes(`sourceNodes`) &&\n        // \"Has not generated nodes\"\n        !nodeOwnerSet.has(plugin.name)\n    )\n    .map(plugin => plugin.name)\n}\n\n/**\n * Warn about plugins that should have created nodes but didn't.\n */\nfunction warnForPluginsWithoutNodes(state: IGatsbyState, nodes: Node[]): void {\n  const pluginsWithNoNodes = discoverPluginsWithoutNodes(state, nodes)\n\n  pluginsWithNoNodes.map(name =>\n    report.warn(\n      `The ${name} plugin has generated no Gatsby nodes. Do you need it?`\n    )\n  )\n}\n\n/**\n * Return the set of nodes for which its root node has not been touched\n */\nfunction getStaleNodes(state: IGatsbyState, nodes: Node[]): Node[] {\n  return nodes.filter(node => {\n    let rootNode = node\n    let whileCount = 0\n    while (\n      rootNode.parent &&\n      getNode(rootNode.parent) !== undefined &&\n      whileCount < 101\n    ) {\n      rootNode = getNode(rootNode.parent)\n      whileCount += 1\n      if (whileCount > 100) {\n        console.log(\n          `It looks like you have a node that's set its parent as itself`,\n          rootNode\n        )\n      }\n    }\n\n    return !state.nodesTouched.has(rootNode.id)\n  })\n}\n\n/**\n * Find all stale nodes and delete them\n */\nfunction deleteStaleNodes(state: IGatsbyState, nodes: Node[]): void {\n  const staleNodes = getStaleNodes(state, nodes)\n\n  if (staleNodes.length > 0) {\n    staleNodes.forEach(node => deleteNode({ node }))\n  }\n}\n\nexport default async ({\n  webhookBody,\n  parentSpan,\n}: {\n  webhookBody?: unknown\n  parentSpan?: Span\n}): Promise<void> => {\n  await apiRunner(`sourceNodes`, {\n    traceId: `initial-sourceNodes`,\n    waitForCascadingActions: true,\n    parentSpan,\n    webhookBody: webhookBody || {},\n  })\n\n  const state = store.getState()\n  const nodes = getNodes()\n\n  warnForPluginsWithoutNodes(state, nodes)\n\n  deleteStaleNodes(state, nodes)\n}\n"],"file":"source-nodes.js"}