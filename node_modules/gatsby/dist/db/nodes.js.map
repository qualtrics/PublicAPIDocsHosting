{"version":3,"sources":["../../src/db/nodes.js"],"names":["_","require","store","nodesDb","runFastFiltersAndSort","loadNodeContent","node","isString","internal","content","Promise","resolve","plugin","getState","flattenedPlugins","find","plug","name","owner","Error","then","module","exports","runQuery"],"mappings":";;AACA,MAAMA,CAAC,GAAGC,OAAO,CAAE,QAAF,CAAjB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAE,UAAF,CAAzB;;AACA,MAAME,OAAkB,GAAGF,OAAO,CAAE,gBAAF,CAAlC;;AACA,MAAM;AAAEG,EAAAA;AAAF,IAA4BH,OAAO,CAAE,2BAAF,CAAzC;;AAkBA;;;;;;AAMA,SAASI,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,MAAIN,CAAC,CAACO,QAAF,CAAWD,IAAI,CAACE,QAAL,CAAcC,OAAzB,CAAJ,EAAuC;AACrC,WAAOC,OAAO,CAACC,OAAR,CAAgBL,IAAI,CAACE,QAAL,CAAcC,OAA9B,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B;AACA,YAAMC,MAAM,GAAGV,KAAK,CACjBW,QADY,GAEZC,gBAFY,CAEKC,IAFL,CAEUC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcX,IAAI,CAACE,QAAL,CAAcU,KAF9C,CAAf;;AAGA,YAAM;AAAEb,QAAAA;AAAF,UAAsBJ,OAAO,CAACW,MAAM,CAACD,OAAR,CAAnC;;AACA,UAAI,CAACN,eAAL,EAAsB;AACpB,cAAM,IAAIc,KAAJ,CACH,sDAAqDP,MAAM,CAACK,IAAK,EAD9D,CAAN;AAGD;;AAED,aAAOZ,eAAe,CAACC,IAAD,CAAf,CAAsBc,IAAtB,CAA2BX,OAAO,IAAI;AAC3C;AACAE,QAAAA,OAAO,CAACF,OAAD,CAAP;AACD,OAHM,CAAP;AAID,KAhBM,CAAP;AAiBD;AACF;;AAEDY,MAAM,CAACC,OAAP,GAAiB,EACf,GAAGnB,OADY;AAEfoB,EAAAA,QAAQ,EAAEnB,qBAFK;AAGfC,EAAAA;AAHe,CAAjB","sourcesContent":["/* @flow */\nconst _ = require(`lodash`)\nconst { store } = require(`../redux`)\nconst nodesDb: NodeStore = require(`../redux/nodes`)\nconst { runFastFiltersAndSort } = require(`../redux/run-fast-filters`)\n\ninterface NodeStore {\n  getNodes: () => Array<any>;\n  getNode: (id: string) => any | undefined;\n  getNodesByType: (type: string) => Array<any>;\n  getTypes: () => Array<string>;\n  hasNodeChanged: (id: string, digest: string) => boolean;\n  getNodeAndSavePathDependency: (id: string, path: string) => any | undefined;\n  runQuery: (args: {\n    gqlType: GraphQLType,\n    queryArgs: Object,\n    firstOnly: boolean,\n    resolvedFields: Object,\n    nodeTypeNames: Array<string>,\n  }) => any | undefined;\n}\n\n/**\n * Get content for a node from the plugin that created it.\n *\n * @param {Object} node\n * @returns {promise}\n */\nfunction loadNodeContent(node) {\n  if (_.isString(node.internal.content)) {\n    return Promise.resolve(node.internal.content)\n  } else {\n    return new Promise(resolve => {\n      // Load plugin's loader function\n      const plugin = store\n        .getState()\n        .flattenedPlugins.find(plug => plug.name === node.internal.owner)\n      const { loadNodeContent } = require(plugin.resolve)\n      if (!loadNodeContent) {\n        throw new Error(\n          `Could not find function loadNodeContent for plugin ${plugin.name}`\n        )\n      }\n\n      return loadNodeContent(node).then(content => {\n        // TODO update node's content field here.\n        resolve(content)\n      })\n    })\n  }\n}\n\nmodule.exports = {\n  ...nodesDb,\n  runQuery: runFastFiltersAndSort,\n  loadNodeContent,\n}\n"],"file":"nodes.js"}