import { Dictionary, Optional } from '@stoplight/types';
import { JSONSchema4TypeName } from 'json-schema';
import * as React from 'react';
import { JSONSchema4CombinerName } from '../../types';
export interface IType {
    type: JSONSchema4TypeName | JSONSchema4CombinerName | 'binary' | '$ref';
    subtype: Optional<JSONSchema4TypeName | JSONSchema4TypeName[]> | '$ref';
    className?: string;
    title: Optional<string>;
}
export declare const Type: React.FunctionComponent<IType>;
interface ITypes {
    className?: string;
    type: Optional<JSONSchema4TypeName | JSONSchema4TypeName[] | JSONSchema4CombinerName | '$ref'>;
    subtype: Optional<JSONSchema4TypeName | JSONSchema4TypeName[] | '$ref'>;
    title: Optional<string>;
}
export declare const Types: React.FunctionComponent<ITypes>;
export declare const PropertyTypeColors: Dictionary<string, IType['type']>;
export {};
