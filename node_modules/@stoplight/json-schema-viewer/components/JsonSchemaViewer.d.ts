import { ErrorBoundaryForwardedProps, FallbackComponent } from '@stoplight/react-error-boundary';
import { TreeState, TreeStore } from '@stoplight/tree-list';
import * as React from 'react';
import { JSONSchema4 } from 'json-schema';
import { SchemaTree, SchemaTreeOptions, SchemaTreePopulateHandler, SchemaTreeRefDereferenceFn } from '../tree/tree';
import { GoToRefHandler, RowRenderer } from '../types';
export interface IJsonSchemaViewer {
    schema: JSONSchema4;
    style?: object;
    emptyText?: string;
    defaultExpandedDepth?: number;
    expanded?: boolean;
    className?: string;
    name?: string;
    hideTopBar?: boolean;
    maxRows?: number;
    onGoToRef?: GoToRefHandler;
    mergeAllOf?: boolean;
    FallbackComponent?: typeof FallbackComponent;
    rowRenderer?: RowRenderer;
    onTreePopulate?: SchemaTreePopulateHandler;
    resolveRef?: SchemaTreeRefDereferenceFn;
    shouldResolveEagerly?: boolean;
}
export declare class JsonSchemaViewerComponent extends React.PureComponent<IJsonSchemaViewer & ErrorBoundaryForwardedProps> {
    protected readonly treeStore: TreeStore;
    protected readonly tree: SchemaTree;
    protected readonly treeState: TreeState;
    constructor(props: IJsonSchemaViewer & ErrorBoundaryForwardedProps);
    protected get treeOptions(): SchemaTreeOptions;
    protected get mergeAllOf(): boolean;
    protected get expandedDepth(): number;
    protected renderSchema(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: Readonly<IJsonSchemaViewer>): void;
    render(): JSX.Element;
}
export declare const JsonSchemaViewer: React.FunctionComponent<IJsonSchemaViewer & import("@stoplight/react-error-boundary").ErrorBoundaryProps<{}>>;
