import { TreeListNode, TreeListParentNode } from '@stoplight/tree-list';
import { JsonPath, Optional } from '@stoplight/types';
import { JSONSchema4 } from 'json-schema';
import { SchemaNode } from '../../types';
export declare type WalkerRefResolver = (path: JsonPath | null, $ref: string) => JSONSchema4;
export declare type WalkingOptions = {
    mergeAllOf: boolean;
    onNode?(fragment: JSONSchema4, node: SchemaNode, parentTreeNode: TreeListNode, level: number): boolean | void;
    stepIn?: boolean;
    resolveRef: WalkerRefResolver;
    shouldResolveEagerly: boolean;
};
export declare type Walker = (schema: Optional<JSONSchema4 | null>, parent: TreeListParentNode, level: number, path: JsonPath, options: WalkingOptions | null) => undefined;
export declare const populateTree: Walker;
