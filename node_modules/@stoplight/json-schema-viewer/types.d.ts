import { IRowRendererOptions, TreeListNode, TreeStore } from '@stoplight/tree-list';
import { Dictionary } from '@stoplight/types';
import { JSONSchema4, JSONSchema4TypeName } from 'json-schema';
import * as React from 'react';
export declare enum SchemaKind {
    Any = "any",
    String = "string",
    Number = "number",
    Integer = "integer",
    Boolean = "boolean",
    Null = "null",
    Array = "array",
    Object = "object"
}
export declare type JSONSchema4CombinerName = 'allOf' | 'anyOf' | 'oneOf';
export declare type JSONSchema4Annotations = 'title' | 'description' | 'default' | 'examples';
export declare type JSONSchema4Metadata = 'id' | '$schema';
export interface ICombinerNode {
    id: string;
    readonly combiner: JSONSchema4CombinerName;
    properties?: JSONSchema4[];
    annotations: Pick<JSONSchema4, JSONSchema4Annotations>;
    readonly type?: JSONSchema4TypeName | JSONSchema4TypeName[];
    title?: string;
}
export interface IBaseNode extends Pick<JSONSchema4, 'enum'> {
    id: string;
    readonly type?: JSONSchema4TypeName | JSONSchema4TypeName[];
    annotations: Partial<Pick<JSONSchema4, JSONSchema4Annotations>>;
    validations: Dictionary<unknown>;
    required?: string[];
    title?: string;
}
export interface IRefNode {
    id: string;
    $ref: string | null;
    title?: string;
}
export interface IArrayNode extends IBaseNode, Pick<JSONSchema4, 'items' | 'additionalItems'> {
}
export interface IObjectNode extends IBaseNode, Pick<JSONSchema4, 'properties' | 'patternProperties' | 'additionalProperties'> {
}
export interface IObjectPropertyNode extends IBaseNode {
    name: string;
}
export declare type SchemaNode = ICombinerNode | IBaseNode | IArrayNode | IObjectNode | IObjectPropertyNode | IRefNode;
export declare type SchemaTreeListNode = TreeListNode;
export declare type GoToRefHandler = (path: string, node: IRefNode) => void;
export declare type RowRenderer = (node: TreeListNode, rowOptions: IRowRendererOptions, treeStore: TreeStore) => React.ReactNode;
