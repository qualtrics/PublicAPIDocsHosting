"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const mergeHeaders = mergeLists((h1, h2) => h1.name.toLowerCase() === h2.name.toLowerCase(), h1 => h1);
const mergeContents = mergeLists((c1, c2) => c1.mediaType.toLowerCase() === c2.mediaType.toLowerCase(), c1 => c1);
exports.mergeResponses = mergeLists((r1, r2) => r1.code === r2.code, (r1, r2) => (Object.assign(Object.assign({}, r1), { headers: mergeHeaders(r1.headers || [], r2.headers || []), contents: mergeContents(r1.contents || [], r2.contents || []) })));
const mergeServers = mergeLists((s1, s2) => s1.url === s2.url, s1 => s1);
exports.mergeOperations = mergeLists((o1, o2) => o1.path === o2.path && o1.method.toLowerCase() === o2.method.toLowerCase(), (o1, o2) => {
    var _a, _b;
    return (Object.assign(Object.assign({}, o1), { request: Object.assign(Object.assign({}, o1.request), { headers: mergeHeaders(((_a = o1.request) === null || _a === void 0 ? void 0 : _a.headers) || [], ((_b = o2.request) === null || _b === void 0 ? void 0 : _b.headers) || []) }), responses: exports.mergeResponses(o1.responses, o2.responses), servers: mergeServers(o1.servers || [], o2.servers || []) }));
});
function mergeLists(compare, merge) {
    return (items1, items2) => {
        return items2.reduce((items, item2) => {
            const mergeTargetIdx = items.findIndex((item) => compare(item, item2));
            if (mergeTargetIdx > -1) {
                items[mergeTargetIdx] = merge(items[mergeTargetIdx], item2);
            }
            else {
                items.push(item2);
            }
            return items;
        }, items1.slice());
    };
}
//# sourceMappingURL=merge.js.map