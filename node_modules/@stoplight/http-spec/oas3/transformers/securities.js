"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const accessors_1 = require("../accessors");
function translateToSecurities(document, operationSecurities) {
    const securities = accessors_1.getSecurities(document, operationSecurities);
    return securities.map(security => lodash_1.compact(security.map(sec => transformToSingleSecurity(sec, sec.key))));
}
exports.translateToSecurities = translateToSecurities;
function transformToSingleSecurity(securityScheme, key) {
    var _a, _b;
    const baseObject = {
        key,
    };
    if (securityScheme.description) {
        baseObject.description = securityScheme.description;
    }
    if (securityScheme.type === 'apiKey') {
        return Object.assign(Object.assign({}, baseObject), { type: 'apiKey', name: securityScheme.name, in: securityScheme.in });
    }
    if (securityScheme.type === 'http') {
        if (((_a = securityScheme.scheme) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'bearer') {
            return Object.assign(Object.assign({}, baseObject), { type: 'http', scheme: 'bearer', bearerFormat: securityScheme.bearerFormat });
        }
        return Object.assign(Object.assign({}, baseObject), { type: 'http', scheme: (_b = securityScheme.scheme) === null || _b === void 0 ? void 0 : _b.toLowerCase() });
    }
    if (securityScheme.type === 'oauth2') {
        return Object.assign(Object.assign({}, baseObject), { type: 'oauth2', flows: transformFlows(securityScheme.flows) });
    }
    if (securityScheme.type === 'openIdConnect') {
        return Object.assign(Object.assign({}, baseObject), { type: 'openIdConnect', openIdConnectUrl: securityScheme.openIdConnectUrl });
    }
    return undefined;
}
exports.transformToSingleSecurity = transformToSingleSecurity;
function transformFlows(flows) {
    const transformedFlows = {};
    if (!lodash_1.isObject(flows)) {
        return transformedFlows;
    }
    if (flows.password) {
        Object.assign(transformedFlows, {
            password: lodash_1.pickBy({
                refreshUrl: flows.password.refreshUrl,
                scopes: flows.password.scopes,
                tokenUrl: flows.password.tokenUrl,
            }),
        });
    }
    if (flows.implicit) {
        Object.assign(transformedFlows, {
            implicit: lodash_1.pickBy({
                authorizationUrl: flows.implicit.authorizationUrl,
                refreshUrl: flows.implicit.refreshUrl,
                scopes: flows.implicit.scopes,
            }),
        });
    }
    if (flows.authorizationCode) {
        Object.assign(transformedFlows, {
            authorizationCode: lodash_1.pickBy({
                authorizationUrl: flows.authorizationCode.authorizationUrl,
                refreshUrl: flows.authorizationCode.refreshUrl,
                scopes: flows.authorizationCode.scopes,
                tokenUrl: flows.authorizationCode.tokenUrl,
            }),
        });
    }
    if (flows.clientCredentials) {
        Object.assign(transformedFlows, {
            clientCredentials: lodash_1.pickBy({
                tokenUrl: flows.clientCredentials.tokenUrl,
                refreshUrl: flows.clientCredentials.refreshUrl,
                scopes: flows.clientCredentials.scopes,
            }),
        });
    }
    return transformedFlows;
}
//# sourceMappingURL=securities.js.map