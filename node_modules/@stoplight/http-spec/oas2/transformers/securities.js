"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const accessors_1 = require("../accessors");
function translateToFlows(security) {
    const flows = {};
    const scopes = security.scopes || {};
    const authorizationUrl = 'authorizationUrl' in security ? security.authorizationUrl || '' : '';
    const tokenUrl = 'tokenUrl' in security ? security.tokenUrl || '' : '';
    if (security.flow === 'implicit') {
        flows.implicit = {
            authorizationUrl,
            scopes,
        };
    }
    else if (security.flow === 'password') {
        flows.password = {
            tokenUrl,
            scopes,
        };
    }
    else if (security.flow === 'application') {
        flows.clientCredentials = {
            tokenUrl,
            scopes,
        };
    }
    else if (security.flow === 'accessCode') {
        flows.authorizationCode = {
            authorizationUrl,
            tokenUrl,
            scopes,
        };
    }
    return flows;
}
function translateToBasicSecurityScheme(security, key) {
    return {
        type: 'http',
        scheme: 'basic',
        description: security.description,
        key,
    };
}
function translateToApiKeySecurityScheme(security, key) {
    const acceptableSecurityOrigins = ['query', 'header'];
    if ('in' in security && security.in && acceptableSecurityOrigins.includes(security.in)) {
        return {
            type: 'apiKey',
            name: security.name || '',
            in: security.in,
            description: security.description,
            key,
        };
    }
    return undefined;
}
const VALID_OAUTH2_FLOWS = ['implicit', 'password', 'application', 'accessCode'];
function translateToOauth2SecurityScheme(security, key) {
    if (!security.flow || !VALID_OAUTH2_FLOWS.includes(security.flow))
        return undefined;
    return {
        type: 'oauth2',
        flows: translateToFlows(security),
        description: security.description,
        key,
    };
}
function translateToSingleSecurity(security, key) {
    switch (security.type) {
        case 'basic':
            return translateToBasicSecurityScheme(security, key);
        case 'apiKey':
            return translateToApiKeySecurityScheme(security, key);
        case 'oauth2':
            return translateToOauth2SecurityScheme(security, key);
    }
    return;
}
exports.translateToSingleSecurity = translateToSingleSecurity;
function translateToSecurities(document, operationSecurity) {
    const securities = accessors_1.getSecurities(document, operationSecurity);
    return securities.map(security => lodash_1.compact(security.map(sec => translateToSingleSecurity(sec, sec.key))));
}
exports.translateToSecurities = translateToSecurities;
//# sourceMappingURL=securities.js.map