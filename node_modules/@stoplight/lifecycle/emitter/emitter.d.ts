import StrictEventEmitter from 'strict-event-emitter-types';
import { IDisposable } from '../disposable';
export interface IEmitGroup<E extends object> {
    queueCount: number;
    emit: EventEmitter<E>['emit'];
    flush: () => void;
    reset: () => void;
}
export interface IEventEmitter<E extends object> extends StrictEventEmitter<IEventEmitterInstance, E> {
    createEmitGroup(): IEmitGroup<E>;
}
export interface IEventEmitterInstance extends IDisposable {
    on(type: number | string, listener: any): IDisposable;
    emit<A extends unknown[] = unknown[]>(type: number | string, ...args: A): void;
    hasListeners: boolean;
}
export declare class EventEmitter<E extends object> implements IEventEmitter<E> {
    private _emitter;
    on(type: unknown, listener: Function): IDisposable;
    emit(type: unknown, ...args: unknown[]): void;
    get hasListeners(): boolean;
    dispose(): void;
    createEmitGroup(): IEmitGroup<E>;
}
export declare function createEventEmitter<T extends object>(): new () => StrictEventEmitter<IEventEmitterInstance, T, T, "addListener" | "addEventListener" | "removeListener" | "removeEventListener" | "once", "emit" | "on">;
