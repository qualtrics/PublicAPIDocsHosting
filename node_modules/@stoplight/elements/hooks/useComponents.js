"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const markdown_viewer_1 = require("@stoplight/markdown-viewer");
const types_1 = require("@stoplight/types");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
const HttpOperation_1 = require("../components/HttpOperation");
const HttpRequest_1 = require("../components/HttpRequest");
const HttpService_1 = require("../components/HttpService");
const Model_1 = require("../components/Model");
const Provider_1 = require("../containers/Provider");
function useComponents() {
    const Components = React.useContext(Provider_1.ComponentsContext);
    return React.useMemo(() => {
        return Object.assign(Object.assign({}, exports.defaultComponents), Components);
    }, [Components]);
}
exports.useComponents = useComponents;
exports.defaultComponents = {
    code: (props, key) => {
        var _a, _b;
        const { node, defaultComponents: components, parent } = props;
        const { annotations, value } = node;
        const nodeType = lodash_1.get(annotations, 'type') || node.meta;
        if (nodeType === types_1.NodeType.Model || nodeType === 'json_schema') {
            return (React.createElement(Model_1.Model, { key: key, className: classnames_1.default('dark:border-darken', {
                    [markdown_viewer_1.CLASSNAMES.bordered]: !parent || parent.type !== 'tab',
                    [markdown_viewer_1.CLASSNAMES.block]: !parent || parent.type !== 'tab',
                }), title: (_a = annotations) === null || _a === void 0 ? void 0 : _a.title, errors: (_b = annotations) === null || _b === void 0 ? void 0 : _b.errors, maxRows: nodeType === 'json_schema' ? 15 : undefined, value: value }));
        }
        else if (nodeType === types_1.NodeType.HttpOperation) {
            return React.createElement(HttpOperation_1.HttpOperation, { key: key, value: value });
        }
        else if (nodeType === types_1.NodeType.HttpService) {
            return React.createElement(HttpService_1.HttpService, { key: key, value: value });
        }
        else if (nodeType === 'http') {
            return (React.createElement(HttpRequest_1.HttpRequest, { key: key, className: classnames_1.default('my-10', {
                    [markdown_viewer_1.CLASSNAMES.block]: !parent || parent.type !== 'tab',
                }), value: value }));
        }
        return components.code(props, key);
    },
};
//# sourceMappingURL=useComponents.js.map