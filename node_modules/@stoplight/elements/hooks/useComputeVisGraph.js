"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
function useComputeVisGraph(rootNode, activeNodeId, graph) {
    return React.useMemo(() => {
        if (!graph || !rootNode)
            return;
        return computeVisGraph(rootNode, graph, activeNodeId);
    }, [rootNode, activeNodeId, graph]);
}
exports.useComputeVisGraph = useComputeVisGraph;
function computeVisGraph(rootNode, graph, activeNodeId) {
    const visGraph = {
        nodes: [
            {
                id: rootNode.id,
                level: 0,
                label: rootNode.name,
                title: rootNode.srn,
                color: activeNodeId === rootNode.id ? '#66b1e7' : '#ef932b',
                font: {
                    color: '#ffffff',
                },
            },
        ],
        edges: [],
    };
    for (const node of graph.nodes) {
        if (node.groupNodeId === rootNode.id)
            continue;
        let fontColor = '#10161a';
        let color = '#f5f8fa';
        if (activeNodeId === node.groupNodeId) {
            color = '#66b1e7';
            fontColor = '#ffffff';
        }
        visGraph.nodes.push({
            id: node.groupNodeId,
            level: node.depth,
            label: node.name,
            title: node.srn,
            color,
            font: {
                color: fontColor,
            },
        });
    }
    for (const edge of graph.edges) {
        let edgeColor = { color: '#cfd9e0', opacity: 0.8 };
        if (activeNodeId === edge.fromGroupNodeId || activeNodeId === edge.toGroupNodeId) {
            edgeColor = { color: '#66b1e7', opacity: 1 };
        }
        visGraph.edges.push({
            id: `${edge.fromGroupNodeId}-${edge.toGroupNodeId}-${edge.fromPath}-${edge.toPath}`,
            from: edge.fromGroupNodeId,
            to: edge.toGroupNodeId,
            title: edge.fromPath,
            color: edgeColor,
            font: {
                align: 'top',
            },
        });
    }
    visGraph.nodes = lodash_1.sortBy(visGraph.nodes, 'label');
    visGraph.edges = lodash_1.uniqBy(visGraph.edges, 'id');
    return visGraph;
}
exports.computeVisGraph = computeVisGraph;
//# sourceMappingURL=useComputeVisGraph.js.map