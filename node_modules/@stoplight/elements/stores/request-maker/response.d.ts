import { IPrismDiagnostic, IPrismOutput } from '@stoplight/prism-core';
import { IHttpResponse as PrismHttpResponse } from '@stoplight/prism-http/dist/types';
import { Dictionary, IHttpRequest } from '@stoplight/types';
import { AxiosError } from 'axios';
import { IHttpNameValue, XHRResponseType } from './types';
declare type MockResponse = {
    status: PrismHttpResponse['statusCode'];
    headers: PrismHttpResponse['headers'];
    violations: IPrismOutput<unknown>['validations']['output'];
    data: unknown;
};
declare type NetworkResponse = {
    data?: ArrayBuffer;
    status: number;
    headers: Dictionary<string>;
};
export declare class ResponseStore {
    readonly raw: ArrayBuffer;
    readonly statusCode: number;
    readonly status: 'Completed' | 'Error' | 'Canceled' | '';
    readonly headers: IHttpNameValue;
    readonly error?: Error;
    readonly isMockedResponse: boolean;
    readonly violations: readonly IPrismDiagnostic[];
    responseTime: number;
    originalRequest?: Partial<IHttpRequest>;
    private constructor();
    static createEmpty(): ResponseStore;
    static fromNetworkResponse(response: NetworkResponse): ResponseStore;
    static fromAxiosError(err: AxiosError): ResponseStore;
    static fromMockObjectResponse(responseObject: MockResponse): ResponseStore;
    static fromError(err: Error): ResponseStore;
    get statusText(): string;
    get responseType(): XHRResponseType;
    private get contentTypeHeaderValue();
    get body(): string;
    get bodyJson(): unknown;
}
export {};
