"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const types_1 = require("@stoplight/types");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const useResolver_1 = require("../../hooks/useResolver");
const SchemaViewer_1 = require("../SchemaViewer/SchemaViewer");
const icon = 'cube';
const color = '#ef932b';
function Model({ value, className, title, maxRows = 50, actions, errors = [] }) {
    const { result } = useResolver_1.useResolver(types_1.NodeType.Model, value);
    return (React.createElement("div", { className: "Model" },
        React.createElement(ModelHeader, { title: title, actions: actions, errors: errors }),
        React.createElement(SchemaViewer_1.SchemaViewer, { className: className, schema: result, maxRows: maxRows, shouldResolveEagerly: true })));
}
exports.Model = Model;
function ModelHeader({ title, actions, errors, }) {
    const hasErrors = errors && errors.length;
    if (!title && !actions && !hasErrors) {
        return null;
    }
    return (React.createElement("div", { className: classnames_1.default('flex items-center p-2', {
            'border border-b-0 dark:border-darken-3 bg-white dark:bg-gray-7': actions,
        }), style: { height: 30 } },
        title && (React.createElement("div", { className: "flex items-center flex-1" },
            React.createElement(core_1.Icon, { icon: icon, color: color, iconSize: 14 }),
            React.createElement("div", { className: classnames_1.default(core_1.Classes.TEXT_MUTED, 'px-2'), style: { fontSize: 12 } }, title))),
        React.createElement("div", { className: "flex-1" }),
        React.createElement(Errors, { errors: errors }),
        actions));
}
function Errors({ errors }) {
    if (!errors || !errors.length) {
        return null;
    }
    return (React.createElement(core_1.Popover, { interactionKind: core_1.PopoverInteractionKind.HOVER, target: React.createElement(core_1.Tag, { intent: core_1.Intent.DANGER },
            errors.length,
            " Error",
            errors.length > 1 && 's'), content: React.createElement("div", { className: classnames_1.default('p-6 max-w-md break-all', {
                'list-none': errors.length === 1,
            }) }, errors.map((error, index) => {
            return (React.createElement("li", { key: index, className: index > 1 ? 'mt-3' : '' }, error.message));
        })) }));
}
//# sourceMappingURL=index.js.map