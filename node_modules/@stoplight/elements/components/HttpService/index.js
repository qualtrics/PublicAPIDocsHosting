"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const types_1 = require("@stoplight/types");
const withErrorBoundary_1 = require("@stoplight/ui-kit/withErrorBoundary");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
const useResolver_1 = require("../../hooks/useResolver");
const HttpSecuritySchemes_1 = require("../HttpSecuritySchemes");
const MarkdownViewer_1 = require("../MarkdownViewer");
const HttpServiceComponent = ({ className, value }) => {
    const { result } = useResolver_1.useResolver(types_1.NodeType.HttpService, value);
    if (lodash_1.isEmpty(result))
        return null;
    return (React.createElement("div", { className: classnames_1.default('HttpService', className) },
        result.description && React.createElement(MarkdownViewer_1.MarkdownViewer, { className: "mb-10", markdown: result.description }),
        result.servers && result.servers.length > 0 ? (React.createElement("div", { className: "mb-10" },
            React.createElement("div", { className: "mb-4 text-lg font-semibold select-none" }, "Servers"),
            result.servers.map((server, index) => (React.createElement("div", { className: "flex items-center flex-1 mt-4", key: index },
                server.name && React.createElement("div", null,
                    server.name,
                    " - "),
                server.description && React.createElement("div", null,
                    server.description,
                    " - "),
                React.createElement("a", { href: server.url, target: "_blank", rel: "noopener noreferrer" }, server.url)))))) : null,
        result.security && (React.createElement(HttpSecuritySchemes_1.HttpSecuritySchemes, { className: "mb-10", title: "Global Securities", securities: result.security })),
        result.securitySchemes && (React.createElement(HttpSecuritySchemes_1.HttpSecuritySchemes, { className: "mb-10", title: "Security Schemes", securities: result.securitySchemes })),
        result.contact && (result.contact.email || result.contact.url) && (React.createElement("div", { className: "mb-10" },
            React.createElement("div", { className: "mb-4 text-lg font-semibold select-none" }, "Contact"),
            result.contact.name && React.createElement("div", null, result.contact.name),
            result.contact.email && result.contact.url && (React.createElement("div", { className: "flex items-center mt-2" },
                result.contact.email && (React.createElement("a", { className: "flex items-center mr-4", href: `mailto:${result.contact.email}`, target: "_blank", rel: "noopener noreferrer" },
                    React.createElement(core_1.Icon, { icon: "envelope", className: "mr-2", iconSize: 12 }),
                    "Email")),
                result.contact.url && (React.createElement("a", { className: "flex items-center", href: result.contact.url, target: "_blank", rel: "noopener noreferrer" },
                    React.createElement(core_1.Icon, { icon: "link", className: "mr-2", iconSize: 12 }),
                    " URL")))))),
        result.termsOfService && (React.createElement("div", { className: "mb-10" },
            React.createElement("div", { className: "mb-4 text-lg font-semibold select-none" }, "Terms of Service"),
            React.createElement("a", { href: result.termsOfService, target: "_blank", rel: "noopener noreferrer" }, result.termsOfService))),
        result.license && (result.license.url || result.license.name) && (React.createElement("div", null,
            React.createElement("div", { className: "mb-4 text-lg font-semibold select-none" }, "License"),
            result.license.url ? (React.createElement("a", { href: result.license.url, target: "_blank", rel: "noopener noreferrer" }, result.license.name || result.license.url)) : (React.createElement("span", null, result.license.name))))));
};
HttpServiceComponent.displayName = 'HttpService.Component';
exports.HttpService = withErrorBoundary_1.withErrorBoundary(HttpServiceComponent, ['value'], 'HttpService');
//# sourceMappingURL=index.js.map