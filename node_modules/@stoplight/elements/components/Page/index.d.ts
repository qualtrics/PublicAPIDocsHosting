import { IErrorBoundary } from '@stoplight/ui-kit/withErrorBoundary';
import * as React from 'react';
import { INodeInfo } from '../../types';
import { IPageHeader } from './Header';
import { IPageTab } from './Tabs';
export interface IPage extends IErrorBoundary {
    node: INodeInfo;
    tabs(props: {
        node: INodeInfo;
    }): IPageTab[];
    actions?: IPageHeader['actions'];
    padding?: string;
    className?: string;
    shadows?: boolean;
    scrollInnerContainer?: boolean;
}
export declare const Page: {
    new (props: Readonly<IPage>): {
        state: {
            error: null;
        };
        componentDidUpdate(prevProps: Readonly<IPage>): void;
        render(): JSX.Element;
        context: any;
        setState<K extends "error">(state: {
            error: Error | null;
        } | ((prevState: Readonly<{
            error: Error | null;
        }>, props: Readonly<IPage>) => {
            error: Error | null;
        } | Pick<{
            error: Error | null;
        }, K> | null) | Pick<{
            error: Error | null;
        }, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<IPage> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<IPage>, prevState: Readonly<{
            error: Error | null;
        }>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<IPage>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<IPage>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
    };
    new (props: IPage, context?: any): {
        state: {
            error: null;
        };
        componentDidUpdate(prevProps: Readonly<IPage>): void;
        render(): JSX.Element;
        context: any;
        setState<K_1 extends "error">(state: {
            error: Error | null;
        } | ((prevState: Readonly<{
            error: Error | null;
        }>, props: Readonly<IPage>) => {
            error: Error | null;
        } | Pick<{
            error: Error | null;
        }, K_1> | null) | Pick<{
            error: Error | null;
        }, K_1> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<IPage> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<IPage>, prevState: Readonly<{
            error: Error | null;
        }>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<IPage>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<IPage>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<IPage>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
    };
    displayName: string | undefined;
    getDerivedStateFromError(error: Error): {
        error: Error;
    };
    contextType?: React.Context<any> | undefined;
};
