import { IErrorBoundary } from '@stoplight/ui-kit/withErrorBoundary';
import * as React from 'react';
export interface IHttpOperationProps extends IErrorBoundary {
    value: any;
    className?: string;
}
export declare const HttpOperation: {
    new (props: Readonly<IHttpOperationProps>): {
        state: {
            error: null;
        };
        componentDidUpdate(prevProps: Readonly<IHttpOperationProps>): void;
        render(): JSX.Element;
        context: any;
        setState<K extends "error">(state: {
            error: Error | null;
        } | ((prevState: Readonly<{
            error: Error | null;
        }>, props: Readonly<IHttpOperationProps>) => {
            error: Error | null;
        } | Pick<{
            error: Error | null;
        }, K> | null) | Pick<{
            error: Error | null;
        }, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<IHttpOperationProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<IHttpOperationProps>, prevState: Readonly<{
            error: Error | null;
        }>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<IHttpOperationProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<IHttpOperationProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
    };
    new (props: IHttpOperationProps, context?: any): {
        state: {
            error: null;
        };
        componentDidUpdate(prevProps: Readonly<IHttpOperationProps>): void;
        render(): JSX.Element;
        context: any;
        setState<K_1 extends "error">(state: {
            error: Error | null;
        } | ((prevState: Readonly<{
            error: Error | null;
        }>, props: Readonly<IHttpOperationProps>) => {
            error: Error | null;
        } | Pick<{
            error: Error | null;
        }, K_1> | null) | Pick<{
            error: Error | null;
        }, K_1> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callback?: (() => void) | undefined): void;
        readonly props: Readonly<IHttpOperationProps> & Readonly<{
            children?: React.ReactNode;
        }>;
        refs: {
            [key: string]: React.ReactInstance;
        };
        componentDidMount?(): void;
        shouldComponentUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): boolean;
        componentWillUnmount?(): void;
        componentDidCatch?(error: Error, errorInfo: React.ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<IHttpOperationProps>, prevState: Readonly<{
            error: Error | null;
        }>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<IHttpOperationProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<IHttpOperationProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<IHttpOperationProps>, nextState: Readonly<{
            error: Error | null;
        }>, nextContext: any): void;
    };
    displayName: string | undefined;
    getDerivedStateFromError(error: Error): {
        error: Error;
    };
    contextType?: React.Context<any> | undefined;
};
