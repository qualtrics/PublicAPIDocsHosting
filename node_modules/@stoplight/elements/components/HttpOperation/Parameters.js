"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_schema_viewer_1 = require("@stoplight/json-schema-viewer");
const ui_kit_1 = require("@stoplight/ui-kit");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
const MarkdownViewer_1 = require("../MarkdownViewer");
exports.Parameters = ({ parameters, title, className }) => {
    if (!parameters || !parameters.length)
        return null;
    return (React.createElement("div", { className: classnames_1.default('HttpOperation__Parameters', className) },
        title && React.createElement("div", { className: "text-lg font-semibold" }, title),
        React.createElement("div", { className: "mt-6 border rounded TreeList dark:border-darken" }, lodash_1.sortBy(parameters, ['required', 'name']).map((parameter, index) => (React.createElement(exports.Parameter, { key: index, parameter: parameter, className: classnames_1.default('TreeListItem', {
                'TreeListItem--striped': index % 2 !== 0,
            }) }))))));
};
exports.Parameters.displayName = 'HttpOperation.Parameters';
exports.Parameter = ({ parameter, className }) => {
    if (!parameter)
        return null;
    const description = lodash_1.get(parameter, 'description') || lodash_1.get(parameter, 'schema.description');
    const type = lodash_1.get(parameter, 'schema.type', 'unknown');
    const validations = lodash_1.omitBy(Object.assign(Object.assign({}, lodash_1.omit(parameter, ['name', 'required', 'deprecated', 'description', 'schema', 'style'])), lodash_1.omit(lodash_1.get(parameter, 'schema'), ['description', 'type'])), value => typeof value === 'object' && lodash_1.isEmpty(value));
    return (React.createElement("div", { className: classnames_1.default('HttpOperation__Parameter p-4 flex items-start', className), style: { alignItems: 'start' } },
        React.createElement("div", { className: "flex flex-1 flex-start" },
            React.createElement("div", { style: { minWidth: '60px' } },
                React.createElement("div", { className: "mr-2" }, parameter.name),
                React.createElement("div", { className: `${json_schema_viewer_1.PropertyTypeColors[type]} text-sm` }, type)),
            React.createElement("div", { className: "flex-1 ml-4" },
                description && (React.createElement(MarkdownViewer_1.MarkdownViewer, { className: "flex-1 text-darken-7 dark:text-lighten-6", markdown: description })),
                React.createElement("div", { className: "flex flex-wrap text-darken-7 dark:text-lighten-6" },
                    parameter.deprecated && (React.createElement("div", { className: "mt-2 mr-2" },
                        React.createElement(ui_kit_1.Tag, { intent: "warning", minimal: true }, "Deprecated"))),
                    lodash_1.keys(validations).map((key, index) => {
                        return React.createElement(ParameterValidation, { key: index, className: "mt-2 mr-2", name: key, value: validations[key] });
                    })))),
        React.createElement("div", { className: "ml-4 text-right" },
            React.createElement("div", { className: classnames_1.default(parameter.required ? 'font-medium' : 'text-darken-7 dark:text-lighten-6') }, parameter.required ? 'required' : 'optional'))));
};
exports.Parameter.displayName = 'HttpOperation.Parameter';
const ParameterValidation = ({ className, name, value }) => {
    let validation;
    if (Array.isArray(value)) {
        validation = value.map(v => JSON.stringify(v)).join(', ');
    }
    else if (typeof value === 'object') {
        return (React.createElement(React.Fragment, null, lodash_1.keys(value).map((key, i) => (React.createElement(ParameterValidation, { key: i, className: className, name: `${name}.${key}`, value: value[key] })))));
    }
    else {
        validation = JSON.stringify(value);
    }
    return (React.createElement("div", { className: className },
        React.createElement(ui_kit_1.Tag, { minimal: true },
            name,
            ": ",
            validation)));
};
//# sourceMappingURL=Parameters.js.map