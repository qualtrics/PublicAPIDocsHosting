"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const ui_kit_1 = require("@stoplight/ui-kit");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
const MarkdownViewer_1 = require("../MarkdownViewer");
const Parameters_1 = require("./Parameters");
const Schema_1 = require("./Schema");
exports.HttpCodeColor = {
    1: 'gray',
    2: 'green',
    3: 'yellow',
    4: 'orange',
    5: 'red',
};
exports.Responses = ({ className, responses }) => {
    const [activeResponse, setActiveResponse] = React.useState(0);
    if (!responses || !responses.length)
        return null;
    const sortedResponses = [...responses].sort();
    return (React.createElement("div", { className: classnames_1.default('HttpOperation__Responses', className) },
        React.createElement("div", { className: "flex items-center" },
            React.createElement("div", { className: "text-lg font-semibold" }, "Responses")),
        React.createElement(ui_kit_1.ButtonGroup, { className: "mt-6" }, sortedResponses.map((response, index) => {
            if (!response.code)
                return null;
            return (React.createElement(ui_kit_1.Button, { key: response.code, active: activeResponse === index, text: response.code, icon: React.createElement(ui_kit_1.Icon, { icon: "full-circle", iconSize: 10, color: exports.HttpCodeColor[String(response.code)[0]] }), onClick: () => setActiveResponse(index) }));
        })),
        React.createElement(exports.Response, { className: "mt-6", response: sortedResponses[activeResponse] })));
};
exports.Responses.displayName = 'HttpOperation.Responses';
exports.Response = ({ className, response }) => {
    if (!response || typeof response !== 'object')
        return null;
    return (React.createElement("div", { className: classnames_1.default('HttpOperation__Response', className) },
        response.description && React.createElement(MarkdownViewer_1.MarkdownViewer, { className: "mb-6", markdown: response.description }),
        React.createElement(Parameters_1.Parameters, { className: "mb-6", title: "Headers", parameters: response.headers }),
        React.createElement(Schema_1.Schema, { value: lodash_1.get(response, 'contents[0].schema'), examples: lodash_1.get(response, 'contents[0].examples') })));
};
exports.Response.displayName = 'HttpOperation.Response';
//# sourceMappingURL=Responses.js.map