"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const types_1 = require("@stoplight/types");
const withErrorBoundary_1 = require("@stoplight/ui-kit/withErrorBoundary");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const useResolver_1 = require("../../hooks/useResolver");
const MarkdownViewer_1 = require("../MarkdownViewer");
const Request_1 = require("./Request");
const Responses_1 = require("./Responses");
const HttpOperationComponent = ({ className, value }) => {
    const { result } = useResolver_1.useResolver(types_1.NodeType.HttpOperation, value);
    if (typeof result !== 'object' || result === null) {
        throw new TypeError(`Expected http operation value to be an object but received ${result === null ? 'null' : typeof result}`);
    }
    return (React.createElement("div", { className: classnames_1.default('HttpOperation', className) },
        result.description && (React.createElement(MarkdownViewer_1.MarkdownViewer, { className: "mb-10 HttpOperation__Description", markdown: result.description })),
        React.createElement(Request_1.Request, { request: result.request, security: result.security }),
        React.createElement(Responses_1.Responses, { responses: result.responses })));
};
HttpOperationComponent.displayName = 'HttpOperation.Component';
exports.HttpOperation = withErrorBoundary_1.withErrorBoundary(HttpOperationComponent, ['value'], 'HttpOperation');
//# sourceMappingURL=index.js.map