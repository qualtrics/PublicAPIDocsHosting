"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const ui_kit_1 = require("@stoplight/ui-kit");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const useNodeGraph_1 = require("../../hooks/useNodeGraph");
const node_1 = require("../../utils/node");
const Inbound_1 = require("./Inbound");
const Outbound_1 = require("./Outbound");
exports.Dependencies = ({ className, node, padding }) => {
    var _a, _b, _c, _d, _e, _f;
    const [graphType, setGraphType] = React.useState('outbound');
    const { data: nodeGraph, isValidating } = useNodeGraph_1.useNodeGraph(node.srn, { type: graphType });
    const [isFullScreen, setIsFullScreen] = React.useState(false);
    const visNetwork = React.useRef();
    React.useEffect(() => {
        var _a;
        if (visNetwork) {
            (_a = visNetwork.current) === null || _a === void 0 ? void 0 : _a.fit();
        }
    }, [isFullScreen]);
    if (!((_b = (_a = nodeGraph) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.length)) {
        if (isValidating) {
            return (React.createElement("div", { className: classnames_1.default(className, 'Page__dependencies relative h-full flex items-center justify-center', padding ? `p-${padding}` : '') },
                React.createElement(core_1.Spinner, null)));
        }
    }
    return (React.createElement("div", { className: classnames_1.default(className, 'Page__dependencies', {
            'fixed inset-0 bg-white dark:bg-gray-7 z-50': isFullScreen,
            'relative h-full': !isFullScreen,
        }) },
        React.createElement("div", { className: classnames_1.default('inline-flex items-center py-8', `px-${padding}`, {
                'absolute top-0 left-0 z-10': ((_d = (_c = nodeGraph) === null || _c === void 0 ? void 0 : _c.nodes) === null || _d === void 0 ? void 0 : _d.length) && graphType === 'outbound',
            }) },
            React.createElement(core_1.HTMLSelect, { value: graphType, onChange: e => setGraphType(e.currentTarget.value), options: [
                    {
                        label: 'What do I depend on? (Outbound)',
                        value: 'outbound',
                    },
                    {
                        label: 'What depends on me? (Inbound)',
                        value: 'inbound',
                    },
                ] }),
            React.createElement("div", { className: "ml-4" },
                React.createElement(ui_kit_1.Tooltip, { content: isFullScreen ? 'Exit Fullscreen' : 'Go Fullscreen' },
                    React.createElement(ui_kit_1.Button, { icon: React.createElement(core_1.Icon, { icon: isFullScreen ? 'minimize' : 'fullscreen', iconSize: 14 }), onClick: () => {
                            setIsFullScreen(!isFullScreen);
                        } })))),
        !((_f = (_e = nodeGraph) === null || _e === void 0 ? void 0 : _e.nodes) === null || _f === void 0 ? void 0 : _f.length) ? (React.createElement("div", { className: `px-${padding} pb-${padding}` },
            "This ",
            node_1.NodeTypePrettyName[node.type],
            " does not have any ",
            graphType,
            " depdendencies.")) : graphType === 'outbound' ? (React.createElement(Outbound_1.OutboundDependencies, { ref: network => {
                if (network) {
                    visNetwork.current = network;
                }
            }, node: node, graph: nodeGraph, padding: "6" })) : (React.createElement(Inbound_1.InboundDependencies, { className: `px-${padding} pb-${padding}`, node: node, graph: nodeGraph }))));
};
//# sourceMappingURL=index.js.map