"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@blueprintjs/core");
const types_1 = require("@stoplight/types");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const React = tslib_1.__importStar(require("react"));
const react_graph_vis_1 = tslib_1.__importDefault(require("react-graph-vis"));
const hooks_1 = require("../../hooks");
const useComputeVisGraph_1 = require("../../hooks/useComputeVisGraph");
const useNodesRaw_1 = require("../../hooks/useNodesRaw");
const node_1 = require("../../utils/node");
const Model_1 = require("../Model");
const GoToRef_1 = require("./GoToRef");
const visOptions = {
    autoResize: true,
    layout: {
        hierarchical: {
            enabled: true,
            levelSeparation: 300,
            direction: 'LR',
            sortMethod: 'directed',
        },
    },
    physics: {
        enabled: false,
    },
    edges: {
        smooth: true,
        color: {
            color: '#cfd9e0',
            opacity: 0.8,
        },
        width: 3,
        font: {
            align: 'top',
            color: 'rgba(115, 134, 148, 0.6)',
            strokeWidth: 0,
        },
        arrowStrikethrough: false,
    },
    nodes: {
        shape: 'box',
        labelHighlightBold: false,
    },
};
exports.OutboundDependencies = React.forwardRef((props, visNetworkRef) => {
    var _a, _b;
    const { className, node, padding = '0', graph } = props;
    const [activeNode, setActiveNode] = React.useState();
    const visGraph = useComputeVisGraph_1.useComputeVisGraph(node, (_a = activeNode) === null || _a === void 0 ? void 0 : _a.groupNodeId, graph);
    const onClickNode = e => {
        var _a, _b;
        const nodeId = e.nodes[0];
        if (!nodeId)
            return;
        if (activeNode && activeNode.groupNodeId === nodeId) {
            setActiveNode(undefined);
        }
        else if (node.id === nodeId) {
            setActiveNode({
                groupNodeId: node.id,
                name: node.name,
                srn: node.srn,
            });
        }
        else {
            const n = (_b = (_a = graph) === null || _a === void 0 ? void 0 : _a.nodes) === null || _b === void 0 ? void 0 : _b.find((nd) => nd.groupNodeId === nodeId);
            if (!n)
                return;
            setActiveNode(n);
        }
    };
    const nodeId = (_b = node) === null || _b === void 0 ? void 0 : _b.id;
    React.useEffect(() => {
        setActiveNode(undefined);
    }, [nodeId]);
    if (!visGraph || !visGraph.nodes.length) {
        return React.createElement("div", null,
            "This ",
            node_1.NodeTypePrettyName[node.type],
            " does not have any outbound dependencies.");
    }
    return (React.createElement("div", { className: classnames_1.default(className, 'w-full h-full') },
        React.createElement(react_graph_vis_1.default, { id: node.srn.replace(/[^a-zA-Z]+/g, '-'), graph: visGraph, events: {
                click: onClickNode,
            }, getNetwork: visNetworkRef, options: visOptions }),
        activeNode && (React.createElement("div", { className: classnames_1.default('absolute bottom-0 right-0 left-0 pb-16', `px-${padding}`) },
            React.createElement(ModelContainer, { srn: activeNode.srn, name: activeNode.name, actions: React.createElement(React.Fragment, null,
                    React.createElement("div", { className: "ml-2" },
                        React.createElement(GoToRef_1.GoToRef, { title: name, srn: activeNode.srn })),
                    React.createElement(core_1.Icon, { className: "ml-2 cursor-pointer text-gray-5 hover:text-gray-6", icon: "small-cross", onClick: () => setActiveNode(undefined) })) })))));
});
const ModelContainer = ({ srn, name, actions }) => {
    const { data, isValidating } = useNodesRaw_1.useNodeRaw(srn, { deref: 'bundle' });
    const value = hooks_1.useParsedData(types_1.NodeType.Model, data);
    if (!value || isValidating) {
        return null;
    }
    return (React.createElement(Model_1.Model, { className: "bg-white border dark:border-darken-3 dark:bg-gray-7", title: name, value: value, maxRows: 10, actions: actions }));
};
//# sourceMappingURL=Outbound.js.map