"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const json_1 = require("@stoplight/json");
const types_1 = require("@stoplight/types");
const ui_kit_1 = require("@stoplight/ui-kit");
const ScrollList_1 = require("@stoplight/ui-kit/ScrollList");
const classnames_1 = tslib_1.__importDefault(require("classnames"));
const lodash_1 = require("lodash");
const React = tslib_1.__importStar(require("react"));
const node_1 = require("../../utils/node");
const GoToRef_1 = require("./GoToRef");
exports.InboundDependencies = ({ graph, className, node }) => {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const nodesByType = lodash_1.groupBy(graph.nodes, 'type');
    const firstTab = lodash_1.findKey(nodesByType, nodes => { var _a; return (_a = nodes) === null || _a === void 0 ? void 0 : _a.length; });
    const [selectedTabId, setSelectedTabId] = React.useState();
    const onChangeTab = React.useCallback((newTabId, prevTabId, e) => {
        e.preventDefault();
        e.stopPropagation();
        setSelectedTabId(newTabId);
    }, [setSelectedTabId]);
    return (React.createElement("div", { className: classnames_1.default(className, 'InboundDependencies') },
        React.createElement(ui_kit_1.Tabs, { className: "p-6 border rounded dark:border-darken-3", id: "InboundDependencies", selectedTabId: (selectedTabId !== null && selectedTabId !== void 0 ? selectedTabId : firstTab), onChange: onChangeTab, renderActiveTabPanelOnly: true, vertical: true },
            React.createElement(ui_kit_1.Tab, { id: types_1.NodeType.Model, title: React.createElement("div", { className: "flex items-center" },
                    React.createElement(ui_kit_1.Icon, { className: "mr-2", icon: node_1.NodeTypeIcons[types_1.NodeType.Model], iconSize: 14 }),
                    "Models ",
                    ((_a = nodesByType[types_1.NodeType.Model]) === null || _a === void 0 ? void 0 : _a.length) ? React.createElement(React.Fragment, null,
                        "(",
                        nodesByType[types_1.NodeType.Model].length,
                        ")") : React.createElement(React.Fragment, null, "(0)")), panel: ((_b = nodesByType[types_1.NodeType.Model]) === null || _b === void 0 ? void 0 : _b.length) ? (React.createElement(DependencyTable, { className: `InboundDependencies__DependencyTable`, nodes: nodesByType[types_1.NodeType.Model] })) : (React.createElement("div", null,
                    "There are no models that depend on this ",
                    node_1.NodeTypePrettyName[node.type])), panelClassName: "w-full overflow-auto" }),
            React.createElement(ui_kit_1.Tab, { id: types_1.NodeType.HttpService, title: React.createElement("div", { className: "flex items-center" },
                    React.createElement(ui_kit_1.Icon, { className: "mr-2", icon: node_1.NodeTypeIcons[types_1.NodeType.HttpService], iconSize: 14 }),
                    "APIs",
                    ' ',
                    ((_c = nodesByType[types_1.NodeType.HttpService]) === null || _c === void 0 ? void 0 : _c.length) ? React.createElement(React.Fragment, null,
                        "(",
                        nodesByType[types_1.NodeType.HttpService].length,
                        ")") : React.createElement(React.Fragment, null, "(0)")), panel: ((_d = nodesByType[types_1.NodeType.HttpService]) === null || _d === void 0 ? void 0 : _d.length) ? (React.createElement(DependencyTable, { className: `InboundDependencies__DependencyTable`, nodes: nodesByType[types_1.NodeType.HttpService] })) : (React.createElement("div", null,
                    "There are no services that depend on this ",
                    node_1.NodeTypePrettyName[node.type])), panelClassName: "w-full overflow-auto" }),
            React.createElement(ui_kit_1.Tab, { id: types_1.NodeType.HttpOperation, title: React.createElement("div", { className: "flex items-center" },
                    React.createElement(ui_kit_1.Icon, { className: "mr-2", icon: node_1.NodeTypeIcons[types_1.NodeType.HttpOperation], iconSize: 14 }),
                    "Endpoints",
                    ' ',
                    ((_e = nodesByType[types_1.NodeType.HttpOperation]) === null || _e === void 0 ? void 0 : _e.length) ? (React.createElement(React.Fragment, null,
                        "(",
                        nodesByType[types_1.NodeType.HttpOperation].length,
                        ")")) : (React.createElement(React.Fragment, null, "(0)"))), panel: ((_f = nodesByType[types_1.NodeType.HttpOperation]) === null || _f === void 0 ? void 0 : _f.length) ? (React.createElement(DependencyTable, { className: `InboundDependencies__DependencyTable`, nodes: nodesByType[types_1.NodeType.HttpOperation] })) : (React.createElement("div", null,
                    "There are no endpoints that depend on this ",
                    node_1.NodeTypePrettyName[node.type])), panelClassName: "w-full overflow-auto" }),
            React.createElement(ui_kit_1.Tab, { id: types_1.NodeType.Article, title: React.createElement("div", { className: "flex items-center" },
                    React.createElement(ui_kit_1.Icon, { className: "mr-2", icon: node_1.NodeTypeIcons[types_1.NodeType.Article], iconSize: 14 }),
                    "Articles",
                    ' ',
                    ((_g = nodesByType[types_1.NodeType.Article]) === null || _g === void 0 ? void 0 : _g.length) ? React.createElement(React.Fragment, null,
                        "(",
                        nodesByType[types_1.NodeType.Article].length,
                        ")") : React.createElement(React.Fragment, null, "(0)")), panel: ((_h = nodesByType[types_1.NodeType.Article]) === null || _h === void 0 ? void 0 : _h.length) ? (React.createElement(DependencyTable, { className: `InboundDependencies__DependencyTable`, nodes: nodesByType[types_1.NodeType.Article] })) : (React.createElement("div", null,
                    "There are no articles that depend on this ",
                    node_1.NodeTypePrettyName[node.type])), panelClassName: "w-full overflow-auto" }))));
};
const DependencyTable = ({ className, nodes = [] }) => {
    const listProps = {
        itemData: { nodes: lodash_1.sortBy(nodes, 'uri') },
        itemSize: 60,
        maxRows: 10,
        itemCount: nodes.length,
        height: '100%',
        width: '100%',
    };
    return (React.createElement("div", { className: classnames_1.default('h-full', className) },
        React.createElement(ScrollList_1.FixedSizeList, Object.assign({}, listProps), ({ style, index, data }) => {
            const node = data.nodes[index];
            let subtitle = node.uri;
            if (node.type === types_1.NodeType.HttpOperation) {
                const parts = node.uri.split('/paths/')[1].split('/');
                const method = parts.slice(-1)[0];
                const path = parts.slice(0, parts.length);
                subtitle = `${lodash_1.toUpper(method)} ${json_1.decodePointerFragment(path.join('/'))}`;
            }
            return (React.createElement("div", { key: index, style: style },
                React.createElement(GoToRef_1.GoToRef, { className: "reset", srn: node.srn, group: node.groupSlug, title: node.name },
                    React.createElement("div", { className: classnames_1.default('h-full flex flex-col justify-center px-4 hover:bg-gray-2 dark-hover:bg-lighten-3 ', {
                            'border-t dark:border-darken-3': index > 0,
                            'bg-gray-1 dark:bg-lighten-2': index % 2,
                        }) },
                        React.createElement("div", { className: "flex items-center" },
                            React.createElement("div", { className: "font-medium" }, node.name),
                            node.version !== '0.0' && React.createElement("div", { className: "px-2 text-sm text-gray-6" },
                                "v",
                                node.version),
                            React.createElement("div", { className: "flex-1" }),
                            React.createElement("div", { className: "text-sm text-gray-6 opacity-75" }, node.projectName)),
                        React.createElement("div", { className: "flex items-center opacity-75" },
                            React.createElement("div", { className: "flex-1 text-sm truncate text-gray-6", title: subtitle }, subtitle),
                            React.createElement(ui_kit_1.Tooltip, { content: "Go to Ref" },
                                React.createElement(ui_kit_1.Button, { icon: React.createElement(ui_kit_1.Icon, { icon: "share", iconSize: 12 }), small: true, minimal: true })))))));
        })));
};
//# sourceMappingURL=Inbound.js.map