"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const types_1 = require("@stoplight/types");
const React = tslib_1.__importStar(require("react"));
const Provider_1 = require("../../containers/Provider");
const useComponentSize_1 = require("../../hooks/useComponentSize");
const useComputeMarkdownHeadings_1 = require("../../hooks/useComputeMarkdownHeadings");
const buildNodeMarkdownTree_1 = require("../../utils/buildNodeMarkdownTree");
const MarkdownViewer_1 = require("../MarkdownViewer");
const Headings_1 = require("../Page/Headings");
exports.Docs = ({ node, padding = '12' }) => {
    const containerRef = React.useRef(null);
    const tree = buildNodeMarkdownTree_1.buildNodeMarkdownTree(node.type, node.data, node.errors);
    let resolverOpts;
    if (node.type !== types_1.NodeType.Model) {
        resolverOpts = {
            dereferenceInline: true,
            dereferenceRemote: node.type === types_1.NodeType.Article,
        };
    }
    return (React.createElement("div", { className: "flex w-full Page__docs", ref: containerRef },
        React.createElement(Provider_1.ActiveSrnContext.Provider, { value: node.srn || '' },
            React.createElement(Provider_1.ResolverOptionsContext.Provider, { value: resolverOpts },
                React.createElement(MarkdownViewer_1.MarkdownViewer, { className: `Page__content flex-1 p-${padding}`, markdown: tree }))),
        React.createElement(exports.DocsHeadings, { tree: tree, padding: padding, containerRef: containerRef })));
};
exports.DocsHeadings = ({ tree, padding, containerRef, }) => {
    const { width } = useComponentSize_1.useComponentSize(containerRef);
    const showHeadings = width >= 1000;
    const headings = useComputeMarkdownHeadings_1.useComputeMarkdownHeadings(tree);
    return React.createElement(Headings_1.PageHeadings, { className: "Page__headings", padding: padding, headings: headings, minimal: !showHeadings });
};
//# sourceMappingURL=index.js.map