"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const swr_1 = require("swr");
const createFetchClient_1 = require("../utils/createFetchClient");
const defaultHost = 'http://localhost:8080/api';
exports.HostContext = createNamedContext('Context', defaultHost);
exports.RequestContext = React.createContext({
    host: defaultHost,
    headers: null,
});
exports.ComponentsContext = createNamedContext('ComponentsContext', undefined);
exports.ActiveSrnContext = createNamedContext('ActiveSrnContext', '');
exports.ProjectTokenContext = createNamedContext('ProjectTokenContext', '');
exports.ResolverContext = createNamedContext('ResolverContext', undefined);
exports.ResolverOptionsContext = createNamedContext('ResolverOptionsContext', undefined);
exports.InlineRefResolverContext = createNamedContext('InlineRefResolverContext', undefined);
const defaultIcons = {};
exports.IconsContext = createNamedContext('IconsContext', defaultIcons);
exports.Provider = ({ host, token, projectToken, components, icons, resolver, inlineRefResolver, children, }) => {
    const requestContext = React.useMemo(() => ({
        host: host || defaultHost,
        headers: token
            ? {
                Authorization: `Bearer ${token}`,
            }
            : null,
    }), [host, token]);
    const fetcher = createFetchClient_1.createFetchClient(requestContext);
    return (React.createElement(exports.InlineRefResolverContext.Provider, { value: inlineRefResolver },
        React.createElement(exports.RequestContext.Provider, { value: requestContext },
            React.createElement(swr_1.SWRConfig, { value: {
                    refreshInterval: 0,
                    shouldRetryOnError: false,
                    revalidateOnFocus: false,
                    dedupingInterval: 5 * 60 * 1000,
                    fetcher: (input, init) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
                        return yield (yield fetcher(input, init)).json();
                    }),
                } },
                React.createElement(exports.ProjectTokenContext.Provider, { value: (projectToken !== null && projectToken !== void 0 ? projectToken : '') },
                    React.createElement(exports.ComponentsContext.Provider, { value: components },
                        React.createElement(exports.ResolverContext.Provider, { value: resolver },
                            React.createElement(exports.IconsContext.Provider, { value: icons || defaultIcons }, children))))))));
};
function createNamedContext(name, defaultValue) {
    const context = React.createContext(defaultValue);
    context.displayName = name;
    return context;
}
//# sourceMappingURL=Provider.js.map