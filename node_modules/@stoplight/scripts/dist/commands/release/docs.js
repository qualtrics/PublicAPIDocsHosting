"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const fs = require("fs");
const shell = require("shelljs");
const url = require("url");
const utils_1 = require("../../utils");
class ReleaseDocsCommand extends command_1.Command {
    run() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const parsed = this.parse(ReleaseDocsCommand);
            cli_ux_1.default.action.start('deploying docs...', undefined, { stdout: true });
            let repoUrl;
            const pkg = JSON.parse(fs.readFileSync(utils_1.buildPath('package.json')));
            if (typeof pkg.repository === 'object') {
                if (!pkg.repository.hasOwnProperty('url')) {
                    throw new Error('URL does not exist in repository section');
                }
                repoUrl = pkg.repository.url;
            }
            else {
                repoUrl = pkg.repository;
            }
            if (!repoUrl) {
                cli_ux_1.default.action.stop('docs NOT deployed - no repo url found in your package.json file');
                return;
            }
            const parsedUrl = url.parse(repoUrl);
            const repository = (parsedUrl.host || '') + (parsedUrl.path || '');
            const ghToken = process.env.GH_TOKEN;
            shell.cd('docs-auto');
            shell.touch('.nojekyll');
            const commands = [
                'git init',
                'git add .',
                'git config user.name "Stoplight"',
                'git config user.email "support@stoplight.io"',
                `git commit -m "chore(docs) [skip ci]"`,
                `git push --force --quiet "https://${ghToken}@${repository}" master:gh-pages`,
            ];
            if (parsed.flags.verbose) {
                this.log(`commands:`);
                for (const command of commands) {
                    this.log(`    '${command}'`);
                }
            }
            if (!parsed.flags['dry-run']) {
                for (const command of commands) {
                    utils_1.runCommand(command);
                }
            }
            cli_ux_1.default.action.stop();
        });
    }
}
exports.default = ReleaseDocsCommand;
ReleaseDocsCommand.description = 'Push built docs to github pages.';
ReleaseDocsCommand.examples = [`$ sl-scripts release:docs`];
ReleaseDocsCommand.args = [];
ReleaseDocsCommand.flags = {
    ['dry-run']: command_1.flags.boolean({
        description: 'run the release process but do not publish',
        required: false,
    }),
    verbose: command_1.flags.boolean({
        description: 'moar logs',
        required: false,
    }),
};
//# sourceMappingURL=docs.js.map