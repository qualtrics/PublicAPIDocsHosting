import{createContext as r,createElement as o,useContext as e,useCallback as t,PureComponent as n,createRef as s}from"react";const c=r(console),a=({reporter:r,children:e})=>o(c.Provider,{value:r},e),i=()=>e(c),l=(r,o)=>{const e=i();return t((...o)=>{try{return r(...o)}catch(r){e.error(r)}},o)},p=()=>{window.location.reload()},h=({className:r,tryRecovering:e})=>o("div",{className:r},o("h2",null,"Gah. The component just crashed"),o("p",null,"You can try reloading component or refresh the page."),o("button",{onClick:e,type:"button"},"Reload component"),o("button",{onClick:p,type:"button"},"Refresh page"));class u extends n{constructor(){super(...arguments),this.state={error:null,componentStack:null},this.throwError=(r=>{this.setError(r),this.handleError(r,null)}),this.recover=(()=>{null!==this.state.error?this.setError(null):"production"!==process.env.NODE_ENV&&console.warn("Component has not crashed. Recovering is a no-op in such case")})}componentDidUpdate(r){if(null!==this.state.error&&void 0!==this.props.recoverableProps&&Array.isArray(this.props.recoverableProps))for(const o of this.props.recoverableProps)if(r[o]!==this.props[o]){this.setError(null);break}}componentDidCatch(r,o){this.setError(r,o.componentStack),this.handleError(r,o)}handleError(r,o){if(!1!==this.props.reportErrors)try{null!==o?this.context.error(r.message,{errorInfo:o}):this.context.error(r)}catch(r){console.error("Error could not be reported",r)}if(void 0!==this.props.onError)try{this.props.onError(r,o&&o.componentStack)}catch(r){}}setError(r,o=null){this.setState({error:r,componentStack:o})}render(){const{props:{FallbackComponent:r=h,children:e},state:{error:t,componentStack:n}}=this;return null!==t?o(r,{error:t,componentStack:n,tryRecovering:this.recover}):e}}u.contextType=c;const d=(r,e)=>{const t=t=>{const n=s();return o(u,Object.assign(Object.assign(Object.assign({},e),t),{ref:n}),o(r,Object.assign(Object.assign({},t),{boundaryRef:n})))},n=r.displayName||r.name;return t.displayName=n?`WithErrorBoundary(${n})`:"WithErrorBoundary",t};export{u as ErrorBoundary,c as ErrorBoundaryContext,a as ErrorBoundaryProvider,h as FallbackComponent,l as useHandledCallback,i as useReporter,d as withErrorBoundary};
