import { IPrismDiagnostic, ValidatorFn } from '@stoplight/prism-core';
import { IHttpOperation, IMediaTypeContent } from '@stoplight/types';
import * as contentType from 'content-type';
import * as E from 'fp-ts/lib/Either';
import { validateSecurity } from './validators/security';
import { IHttpRequest, IHttpResponse } from '../types';
import { HttpBodyValidator, HttpHeadersValidator, HttpQueryValidator } from './validators';
import { NonEmptyArray } from 'fp-ts/lib/NonEmptyArray';
import { HttpPathValidator } from './validators/path';
export declare const bodyValidator: HttpBodyValidator;
export declare const headersValidator: HttpHeadersValidator;
export declare const queryValidator: HttpQueryValidator;
export declare const pathValidator: HttpPathValidator;
declare const validateInput: ValidatorFn<IHttpOperation, IHttpRequest>;
export declare const validateMediaType: (contents: NonEmptyArray<IMediaTypeContent>, mediaType: string) => E.Either<NonEmptyArray<IPrismDiagnostic>, {
    parsedMediaType: contentType.ParsedMediaType;
}>;
declare const validateOutput: ValidatorFn<IHttpOperation, IHttpResponse>;
export { validateInput, validateOutput, validateSecurity };
