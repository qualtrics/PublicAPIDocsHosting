import * as RT from './ReadonlyTuple';
// tslint:disable:readonly-array
// -------------------------------------------------------------------------------------
// model
// -------------------------------------------------------------------------------------
/**
 * @category destructors
 * @since 2.0.0
 */
export var fst = RT.fst;
/**
 * @category destructors
 * @since 2.0.0
 */
export var snd = RT.snd;
/**
 * @category combinators
 * @since 2.0.0
 */
export var swap = RT.swap;
/**
 * @category instances
 * @since 2.0.0
 */
export var getApply = RT.getApply;
/**
 * @category instances
 * @since 2.0.0
 */
export var getApplicative = RT.getApplicative;
/**
 * @category instances
 * @since 2.0.0
 */
export var getChain = RT.getChain;
/**
 * @category instances
 * @since 2.0.0
 */
export var getMonad = RT.getMonad;
// TODO: remove in v3
/**
 * @category instances
 * @since 2.0.0
 */
export var getChainRec = RT.getChainRec;
// -------------------------------------------------------------------------------------
// pipeables
// -------------------------------------------------------------------------------------
/**
 * Map a pair of functions over the two type arguments of the bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */
export var bimap = RT.bimap;
/**
 * Map a function over the first type argument of a bifunctor.
 *
 * @category Bifunctor
 * @since 2.0.0
 */
export var mapLeft = RT.mapLeft;
/**
 * @category Semigroupoid
 * @since 2.0.0
 */
export var compose = RT.compose;
/**
 * @category Extend
 * @since 2.0.0
 */
export var duplicate = RT.duplicate;
/**
 * @category Extend
 * @since 2.0.0
 */
export var extend = RT.extend;
/**
 * @category Extract
 * @since 2.6.2
 */
export var extract = RT.extract;
/**
 * @category Foldable
 * @since 2.0.0
 */
export var foldMap = RT.foldMap;
/**
 * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types
 * use the type constructor `F` to represent some computational context.
 *
 * @category Functor
 * @since 2.0.0
 */
export var map = RT.map;
/**
 * @category Foldable
 * @since 2.0.0
 */
export var reduce = RT.reduce;
/**
 * @category Foldable
 * @since 2.0.0
 */
export var reduceRight = RT.reduceRight;
/**
 * @since 2.6.3
 */
export var traverse = RT.traverse;
/**
 * @since 2.6.3
 */
export var sequence = RT.sequence;
// -------------------------------------------------------------------------------------
// instances
// -------------------------------------------------------------------------------------
/**
 * @category instances
 * @since 2.0.0
 */
export var URI = 'Tuple';
/**
 * @category instances
 * @since 2.0.0
 */
export var tuple = 
/*#__PURE__*/
(function () {
    return Object.assign({}, RT.readonlyTuple, { URI: URI });
})();
