import { array, of } from 'fp-ts/es6/Array';
import { getOptionM } from 'fp-ts/es6/OptionT';
import { pipeable } from 'fp-ts/es6/pipeable';
var T = getOptionM(array);
/**
 * @since 0.1.0
 */
export var URI = 'ArrayOption';
/**
 * @since 0.1.0
 */
export var fromArray = T.fromM;
/**
 * @since 0.1.0
 */
export var fromOption = of;
/**
 * @since 0.1.0
 */
export var none = T.none();
/**
 * @since 0.1.0
 */
export var some = T.of;
/**
 * @since 0.1.0
 */
export function fold(onNone, onSome) {
    return function (as) { return T.fold(as, onNone, onSome); };
}
/**
 * @since 0.1.0
 */
export function getOrElse(onNone) {
    return function (as) { return T.getOrElse(as, onNone); };
}
/**
 * @since 0.1.10
 */
export function fromOptionK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return fromOption(f.apply(void 0, a));
    };
}
/**
 * @since 0.1.10
 */
export function chainOptionK(f) {
    return chain(fromOptionK(f));
}
/**
 * @since 0.1.0
 */
export var arrayOption = {
    URI: URI,
    map: T.map,
    of: some,
    ap: T.ap,
    chain: T.chain,
    alt: T.alt
};
var _a = pipeable(arrayOption), alt = _a.alt, ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map;
export { 
/**
 * @since 0.1.0
 */
alt, 
/**
 * @since 0.1.0
 */
ap, 
/**
 * @since 0.1.0
 */
apFirst, 
/**
 * @since 0.1.0
 */
apSecond, 
/**
 * @since 0.1.0
 */
chain, 
/**
 * @since 0.1.0
 */
chainFirst, 
/**
 * @since 0.1.0
 */
flatten, 
/**
 * @since 0.1.0
 */
map };
