/**
 * This module provides a simuation of Haskell do notation.
 *
 * @since 0.1.0
 */
import { sequenceS } from 'fp-ts/es6/Apply';
var DoClass = /** @class */ (function () {
    function DoClass(M, result) {
        this.M = M;
        this.result = result;
    }
    DoClass.prototype.do = function (action) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(action, function () { return s; }); }));
    };
    DoClass.prototype.doL = function (f) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(f(s), function () { return s; }); }));
    };
    DoClass.prototype.bind = function (name, action) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(action, function (b) {
            var _a;
            return Object.assign({}, s, (_a = {}, _a[name] = b, _a));
        }); }));
    };
    DoClass.prototype.bindL = function (name, f) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(f(s), function (b) {
            var _a;
            return Object.assign({}, s, (_a = {}, _a[name] = b, _a));
        }); }));
    };
    DoClass.prototype.let = function (name, a) {
        return new DoClass(this.M, this.M.map(this.result, function (s) {
            var _a;
            return Object.assign({}, s, (_a = {}, _a[name] = a, _a));
        }));
    };
    DoClass.prototype.letL = function (name, f) {
        return new DoClass(this.M, this.M.map(this.result, function (s) {
            var _a;
            return Object.assign({}, s, (_a = {}, _a[name] = f(s), _a));
        }));
    };
    DoClass.prototype.sequenceS = function (r) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(sequenceS(_this.M)(r), function (r) { return Object.assign({}, s, r); }); }));
    };
    DoClass.prototype.sequenceSL = function (f) {
        var _this = this;
        return new DoClass(this.M, this.M.chain(this.result, function (s) { return _this.M.map(sequenceS(_this.M)(f(s)), function (r) { return Object.assign({}, s, r); }); }));
    };
    DoClass.prototype.return = function (f) {
        return this.M.map(this.result, f);
    };
    DoClass.prototype.done = function () {
        return this.result;
    };
    return DoClass;
}());
var init = {};
export function Do(M) {
    return new DoClass(M, M.of(init));
}
