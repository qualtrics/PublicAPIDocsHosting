/**
 * @since 0.1.0
 */
import * as I from "fp-ts/es6/IO";
import { Monad2 } from "fp-ts/es6/Monad";
import { State } from "fp-ts/es6/State";
import IO = I.IO;
declare module "fp-ts/es6/HKT" {
  interface URItoKind2<E, A> {
    StateIO: StateIO<E, A>;
  }
}
/**
 * @since 0.1.0
 */
export declare const URI = "StateIO";
/**
 * @since 0.1.0
 */
export declare type URI = typeof URI;
/**
 * @since 0.1.0
 */
export interface StateIO<S, A> {
  (s: S): IO<[A, S]>;
}
/**
 * @since 0.1.0
 */
export declare function run<S, A>(ma: StateIO<S, A>, s: S): A;
/**
 * @since 0.1.0
 */
export declare const evalState: <S, A>(ma: StateIO<S, A>, s: S) => IO<A>;
/**
 * @since 0.1.0
 */
export declare const execState: <S, A>(ma: StateIO<S, A>, s: S) => IO<S>;
/**
 * @since 0.1.0
 */
export declare const fromIO: <S, A>(ma: IO<A>) => StateIO<S, A>;
/**
 * @since 0.1.0
 */
export declare const fromState: <S, A>(ma: State<S, A>) => StateIO<S, A>;
/**
 * @since 0.1.0
 */
export declare const get: <S>() => StateIO<S, S>;
/**
 * @since 0.1.0
 */
export declare const put: <S>(s: S) => StateIO<S, void>;
/**
 * @since 0.1.0
 */
export declare const modify: <S>(f: (s: S) => S) => StateIO<S, void>;
/**
 * @since 0.1.0
 */
export declare const gets: <S, A>(f: (s: S) => A) => StateIO<S, A>;
/**
 * @since 0.1.10
 */
export declare function fromIOK<A extends Array<unknown>, B>(
  f: (...a: A) => IO<B>
): <R>(...a: A) => StateIO<R, B>;
/**
 * @since 0.1.10
 */
export declare function chainIOK<A, B>(
  f: (a: A) => IO<B>
): <R>(ma: StateIO<R, A>) => StateIO<R, B>;
/**
 * @since 0.1.0
 */
export declare const stateIO: Monad2<URI>;
declare const ap: <E, A>(
    fa: StateIO<E, A>
  ) => <B>(fab: StateIO<E, (a: A) => B>) => StateIO<E, B>,
  apFirst: <E, B>(fb: StateIO<E, B>) => <A>(fa: StateIO<E, A>) => StateIO<E, A>,
  apSecond: <E, B>(
    fb: StateIO<E, B>
  ) => <A>(fa: StateIO<E, A>) => StateIO<E, B>,
  chain: <E, A, B>(
    f: (a: A) => StateIO<E, B>
  ) => (ma: StateIO<E, A>) => StateIO<E, B>,
  chainFirst: <E, A, B>(
    f: (a: A) => StateIO<E, B>
  ) => (ma: StateIO<E, A>) => StateIO<E, A>,
  flatten: <E, A>(mma: StateIO<E, StateIO<E, A>>) => StateIO<E, A>,
  map: <A, B>(f: (a: A) => B) => <E>(fa: StateIO<E, A>) => StateIO<E, B>;
export {
  /**
   * @since 0.1.0
   */
  ap,
  /**
   * @since 0.1.0
   */
  apFirst,
  /**
   * @since 0.1.0
   */
  apSecond,
  /**
   * @since 0.1.0
   */
  chain,
  /**
   * @since 0.1.0
   */
  chainFirst,
  /**
   * @since 0.1.0
   */
  flatten,
  /**
   * @since 0.1.0
   */
  map
};
