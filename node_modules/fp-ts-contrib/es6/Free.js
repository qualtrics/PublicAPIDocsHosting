import { pipeable } from 'fp-ts/es6/pipeable';
/**
 * @since 0.1.3
 */
export var URI = 'Free';
var impure = function (fx, f) { return ({ _tag: 'Impure', fx: fx, f: f }); };
/**
 * Check if given Free instance is Pure
 *
 * @since 0.1.3
 */
export var isPure = function (fa) { return fa._tag === 'Pure'; };
/**
 * Check if given Free instance is Impure
 *
 * @since 0.1.3
 */
export var isImpure = function (fa) { return fa._tag === 'Impure'; };
/**
 * Lift an impure value described by the generating type constructor `F` into the free monad
 *
 * @since 0.1.3
 */
export var liftF = function (fa) { return impure(fa, function (a) { return free.of(a); }); };
var substFree = function (f) {
    function go(fa) {
        switch (fa._tag) {
            case 'Pure':
                return free.of(fa.value);
            case 'Impure':
                return free.chain(f(fa.fx), function (x) { return go(fa.f(x)); });
        }
    }
    return go;
};
export function hoistFree(nt) {
    return substFree(function (fa) { return liftF(nt(fa)); });
}
export function foldFree(M) {
    return function (nt, fa) {
        if (isPure(fa)) {
            return M.of(fa.value);
        }
        else {
            return M.chain(nt(fa.fx), function (x) { return foldFree(M)(nt, fa.f(x)); });
        }
    };
}
/**
 * Monad instance for Free
 *
 * @since 0.1.3
 */
export var free = {
    URI: URI,
    /**
     * @since 0.1.3
     */
    of: function (value) { return ({ _tag: 'Pure', value: value }); },
    /**
     * @since 0.1.3
     */
    chain: function (ma, f) {
        return isPure(ma) ? f(ma.value) : impure(ma.fx, function (x) { return free.chain(ma.f(x), f); });
    },
    /**
     * @since 0.1.3
     */
    map: function (fa, f) { return (isPure(fa) ? free.of(f(fa.value)) : impure(fa.fx, function (x) { return free.map(fa.f(x), f); })); },
    /**
     * @since 0.1.3
     */
    ap: function (fab, fa) { return free.chain(fab, function (f) { return free.map(fa, f); }); }
};
var _a = pipeable(free), ap = _a.ap, chain = _a.chain, map = _a.map, flatten = _a.flatten;
export { 
/**
 * @since 0.1.3
 */
ap, 
/**
 * @since 0.1.3
 */
chain, 
/**
 * @since 0.1.3
 */
map, 
/**
 * @since 0.1.3
 */
flatten };
