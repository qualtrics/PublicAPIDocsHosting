var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { task, of, map as taskMap } from 'fp-ts/es6/Task';
import { fromEither as optionFromEither, fromNullable as optionFromNullable, toUndefined as optionToUndefined, toNullable as optionToNullable, chain as optionChain, mapNullable as optionMapNullable, some as optionSome, none as optionNone, option } from 'fp-ts/es6/Option';
import { getOptionM } from 'fp-ts/es6/OptionT';
import { pipeable } from 'fp-ts/es6/pipeable';
import { getFilterableComposition } from 'fp-ts/es6/Filterable';
var T = getOptionM(task);
/**
 * @since 0.1.0
 */
export var URI = 'TaskOption';
/**
 * @since 0.1.0
 */
export var fromTask = T.fromM;
/**
 * @since 0.1.0
 */
export var fromOption = of;
/**
 * @since 0.1.0
 */
export var none = T.none();
/**
 * @since 0.1.0
 */
export var some = T.of;
/**
 * @since 0.1.0
 */
export function fold(onNone, onSome) {
    return function (as) { return T.fold(as, onNone, onSome); };
}
/**
 * @since 0.1.0
 */
export function getOrElse(onNone) {
    return function (as) { return T.getOrElse(as, onNone); };
}
/**
 * @since 0.1.4
 */
export function fromNullable(a) {
    return fromOption(optionFromNullable(a));
}
/**
 * @since 0.1.4
 */
export function fromTaskEither(ma) {
    return task.map(ma, optionFromEither);
}
/**
 * @since 0.1.4
 */
export function toUndefined(ma) {
    return task.map(ma, optionToUndefined);
}
/**
 * @since 0.1.4
 */
export function toNullable(ma) {
    return task.map(ma, optionToNullable);
}
/**
 * @since 0.1.4
 */
export function chainTask(f) {
    return function (ma) { return T.chain(ma, function (a) { return fromTask(f(a)); }); };
}
/**
 * @since 0.1.4
 */
export function chainOption(f) {
    return taskMap(optionChain(f));
}
/**
 * @since 0.1.5
 */
export function mapNullable(f) {
    return taskMap(optionMapNullable(f));
}
/**
 * @since 0.1.5
 */
export function tryCatch(f) {
    return function () {
        return f().then(function (a) { return optionSome(a); }, function () { return optionNone; });
    };
}
/**
 * @since 0.1.10
 */
export function fromOptionK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return fromOption(f.apply(void 0, a));
    };
}
/**
 * @since 0.1.10
 */
export function chainOptionK(f) {
    return chain(fromOptionK(f));
}
/**
 * @since 0.1.0
 */
export var taskOption = __assign({ URI: URI, of: some, ap: T.ap, chain: T.chain, alt: T.alt, zero: T.none }, getFilterableComposition(task, option));
var _a = pipeable(taskOption), alt = _a.alt, ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map, partition = _a.partition, partitionMap = _a.partitionMap, filter = _a.filter, filterMap = _a.filterMap, compact = _a.compact, separate = _a.separate;
export { 
/**
 * @since 0.1.0
 */
alt, 
/**
 * @since 0.1.0
 */
ap, 
/**
 * @since 0.1.0
 */
apFirst, 
/**
 * @since 0.1.0
 */
apSecond, 
/**
 * @since 0.1.0
 */
chain, 
/**
 * @since 0.1.0
 */
chainFirst, 
/**
 * @since 0.1.0
 */
flatten, 
/**
 * @since 0.1.0
 */
map, 
/**
 * @since 0.1.5
 */
partition, 
/**
 * @since 0.1.5
 */
partitionMap, 
/**
 * @since 0.1.5
 */
filter, 
/**
 * @since 0.1.5
 */
filterMap, 
/**
 * @since 0.1.5
 */
compact, 
/**
 * @since 0.1.5
 */
separate };
