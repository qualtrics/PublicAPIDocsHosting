"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var pipeable_1 = require("fp-ts/lib/pipeable");
/**
 * @since 0.1.3
 */
exports.URI = 'Free';
var impure = function (fx, f) { return ({ _tag: 'Impure', fx: fx, f: f }); };
/**
 * Check if given Free instance is Pure
 *
 * @since 0.1.3
 */
exports.isPure = function (fa) { return fa._tag === 'Pure'; };
/**
 * Check if given Free instance is Impure
 *
 * @since 0.1.3
 */
exports.isImpure = function (fa) { return fa._tag === 'Impure'; };
/**
 * Lift an impure value described by the generating type constructor `F` into the free monad
 *
 * @since 0.1.3
 */
exports.liftF = function (fa) { return impure(fa, function (a) { return exports.free.of(a); }); };
var substFree = function (f) {
    function go(fa) {
        switch (fa._tag) {
            case 'Pure':
                return exports.free.of(fa.value);
            case 'Impure':
                return exports.free.chain(f(fa.fx), function (x) { return go(fa.f(x)); });
        }
    }
    return go;
};
function hoistFree(nt) {
    return substFree(function (fa) { return exports.liftF(nt(fa)); });
}
exports.hoistFree = hoistFree;
function foldFree(M) {
    return function (nt, fa) {
        if (exports.isPure(fa)) {
            return M.of(fa.value);
        }
        else {
            return M.chain(nt(fa.fx), function (x) { return foldFree(M)(nt, fa.f(x)); });
        }
    };
}
exports.foldFree = foldFree;
/**
 * Monad instance for Free
 *
 * @since 0.1.3
 */
exports.free = {
    URI: exports.URI,
    /**
     * @since 0.1.3
     */
    of: function (value) { return ({ _tag: 'Pure', value: value }); },
    /**
     * @since 0.1.3
     */
    chain: function (ma, f) {
        return exports.isPure(ma) ? f(ma.value) : impure(ma.fx, function (x) { return exports.free.chain(ma.f(x), f); });
    },
    /**
     * @since 0.1.3
     */
    map: function (fa, f) { return (exports.isPure(fa) ? exports.free.of(f(fa.value)) : impure(fa.fx, function (x) { return exports.free.map(fa.f(x), f); })); },
    /**
     * @since 0.1.3
     */
    ap: function (fab, fa) { return exports.free.chain(fab, function (f) { return exports.free.map(fa, f); }); }
};
var _a = pipeable_1.pipeable(exports.free), ap = _a.ap, chain = _a.chain, map = _a.map, flatten = _a.flatten;
exports.ap = ap;
exports.chain = chain;
exports.map = map;
exports.flatten = flatten;
