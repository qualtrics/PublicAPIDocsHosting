"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @since 0.1.0
 */
var Task_1 = require("fp-ts/lib/Task");
/**
 * Returns the task result if it completes within a timeout, or a fallback value instead.
 *
 * @example
 * import { withTimeout } from 'fp-ts-contrib/lib/Task/withTimeout'
 * import { delay, of } from 'fp-ts/lib/Task'
 *
 * const completeAfter2s = delay(2000)(of('result'))
 *
 * async function f() {
 *   const a1 = await withTimeout('timeout', 3000)(completeAfter2s)()
 *   assert.strictEqual(a1, 'result')
 *   const a2 = await withTimeout('timeout', 1000)(completeAfter2s)()
 *   assert.strictEqual(a2, 'timeout')
 * }
 *
 * f()
 *
 * @since 0.1.0
 */
function withTimeout(onTimeout, millis) {
    var M = Task_1.getRaceMonoid();
    var fallback = Task_1.delay(millis)(Task_1.of(onTimeout));
    return function (ma) { return M.concat(ma, fallback); };
}
exports.withTimeout = withTimeout;
