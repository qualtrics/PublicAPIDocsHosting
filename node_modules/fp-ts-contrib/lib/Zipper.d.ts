/**
 * Provides a pointed array, which is a non-empty zipper-like array structure that tracks an index (focus)
 * position in an array. Focus can be moved forward and backwards through the array.
 *
 * The array `[1, 2, 3, 4]` with focus on `3` is represented by `Zipper([1, 2], 3, [4])`
 *
 * Adapted from
 *
 * - https://github.com/DavidHarrison/purescript-list-zipper
 * - https://github.com/thunklife/purescript-zipper
 * - https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Zipper.scala
 *
 * @since 0.1.6
 */
import { Applicative1 } from "fp-ts/lib/Applicative";
import { Comonad1 } from "fp-ts/lib/Comonad";
import { Monoid } from "fp-ts/lib/Monoid";
import { NonEmptyArray } from "fp-ts/lib/NonEmptyArray";
import { Option } from "fp-ts/lib/Option";
import { Semigroup } from "fp-ts/lib/Semigroup";
import { Show } from "fp-ts/lib/Show";
import { Foldable1 } from "fp-ts/lib/Foldable";
import { Traversable1 } from "fp-ts/lib/Traversable";
declare module "fp-ts/lib/HKT" {
  interface URItoKind<A> {
    Zipper: Zipper<A>;
  }
}
/**
 * @since 0.1.6
 */
export declare const URI = "Zipper";
/**
 * @since 0.1.6
 */
export declare type URI = typeof URI;
/**
 * @since 0.1.6
 */
export interface Zipper<A> {
  readonly lefts: Array<A>;
  readonly focus: A;
  readonly rights: Array<A>;
}
/**
 * Creates a new zipper.
 * @since 0.1.6
 */
export declare function make<A>(
  lefts: Array<A>,
  focus: A,
  rights: Array<A>
): Zipper<A>;
/**
 * @since 0.1.6
 */
export declare function length<A>(fa: Zipper<A>): number;
/**
 * Updates the focus of the zipper.
 * @since 0.1.6
 */
export declare function update<A>(a: A): (fa: Zipper<A>) => Zipper<A>;
/**
 * Applies `f` to the focus and update with the result.
 * @since 0.1.6
 */
export declare function modify<A>(f: (a: A) => A): (fa: Zipper<A>) => Zipper<A>;
/**
 * @since 0.1.6
 */
export declare function toArray<A>(fa: Zipper<A>): Array<A>;
/**
 * @since 0.1.6
 */
export declare function isOutOfBound<A>(index: number, fa: Zipper<A>): boolean;
/**
 * Moves focus in the zipper, or `None` if there is no such element.
 * @since 0.1.6
 */
export declare function move<A>(
  f: (currentIndex: number) => number,
  fa: Zipper<A>
): Option<Zipper<A>>;
/**
 * Moves focus of the zipper up.
 * @since 0.1.6
 */
export declare function up<A>(fa: Zipper<A>): Option<Zipper<A>>;
/**
 * Moves focus of the zipper down.
 * @since 0.1.6
 */
export declare function down<A>(fa: Zipper<A>): Option<Zipper<A>>;
/**
 * Moves focus to the start of the zipper.
 * @since 0.1.6
 */
export declare function start<A>(fa: Zipper<A>): Zipper<A>;
/**
 * Moves focus to the end of the zipper.
 * @since 0.1.6
 */
export declare function end<A>(fa: Zipper<A>): Zipper<A>;
/**
 * Inserts an element to the left of the focus and focuses on the new element.
 * @since 0.1.6
 */
export declare function insertLeft<A>(a: A): (fa: Zipper<A>) => Zipper<A>;
/**
 * Inserts an element to the right of the focus and focuses on the new element.
 * @since 0.1.6
 */
export declare function insertRight<A>(a: A): (fa: Zipper<A>) => Zipper<A>;
/**
 * Deletes the element at focus and moves the focus to the left. If there is no element on the left,
 * the focus is moved to the right.
 * @since 0.1.6
 */
export declare function deleteLeft<A>(fa: Zipper<A>): Option<Zipper<A>>;
/**
 * Deletes the element at focus and moves the focus to the right. If there is no element on the right,
 * the focus is moved to the left.
 * @since 0.1.6
 */
export declare function deleteRight<A>(fa: Zipper<A>): Option<Zipper<A>>;
/**
 * @since 0.1.6
 */
export declare function getShow<A>(S: Show<A>): Show<Zipper<A>>;
/**
 * @since 0.1.6
 */
export declare function fromArray<A>(
  as: Array<A>,
  focusIndex?: number
): Option<Zipper<A>>;
/**
 * @since 0.1.6
 */
export declare function fromNonEmptyArray<A>(nea: NonEmptyArray<A>): Zipper<A>;
/**
 * @since 0.1.6
 */
export declare function of<A>(focus: A): Zipper<A>;
/**
 * @since 0.1.6
 */
export declare function getSemigroup<A>(S: Semigroup<A>): Semigroup<Zipper<A>>;
/**
 * @since 0.1.6
 */
export declare function getMonoid<A>(M: Monoid<A>): Monoid<Zipper<A>>;
/**
 * @since 0.1.6
 */
export declare const zipper: Applicative1<URI> &
  Foldable1<URI> &
  Traversable1<URI> &
  Comonad1<URI>;
declare const ap: <A>(
    fa: Zipper<A>
  ) => <B>(fab: Zipper<(a: A) => B>) => Zipper<B>,
  apFirst: <B>(fb: Zipper<B>) => <A>(fa: Zipper<A>) => Zipper<A>,
  apSecond: <B>(fb: Zipper<B>) => <A>(fa: Zipper<A>) => Zipper<B>,
  duplicate: <A>(ma: Zipper<A>) => Zipper<Zipper<A>>,
  extend: <A, B>(f: (fa: Zipper<A>) => B) => (ma: Zipper<A>) => Zipper<B>,
  foldMap: <M>(M: Monoid<M>) => <A>(f: (a: A) => M) => (fa: Zipper<A>) => M,
  map: <A, B>(f: (a: A) => B) => (fa: Zipper<A>) => Zipper<B>,
  reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: Zipper<A>) => B,
  reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: Zipper<A>) => B;
export {
  /**
   * @since 0.1.6
   */
  ap,
  /**
   * @since 0.1.11
   */
  apFirst,
  /**
   * @since 0.1.11
   */
  apSecond,
  /**
   * @since 0.1.11
   */
  duplicate,
  /**
   * @since 0.1.11
   */
  extend,
  /**
   * @since 0.1.11
   */
  foldMap,
  /**
   * @since 0.1.6
   */
  map,
  /**
   * @since 0.1.6
   */
  reduce,
  /**
   * @since 0.1.6
   */
  reduceRight
};
