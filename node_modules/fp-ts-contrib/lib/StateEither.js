"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @since 0.1.12
 */
var E = require("fp-ts/lib/Either");
var StateT_1 = require("fp-ts/lib/StateT");
var pipeable_1 = require("fp-ts/lib/pipeable");
var T = StateT_1.getStateM(E.either);
/**
 * @since 0.1.12
 */
exports.URI = 'StateEither';
/**
 * @since 0.1.12
 */
exports.evalState = T.evalState;
/**
 * @since 0.1.12
 */
exports.execState = T.execState;
/**
 * @since 0.1.12
 */
function left(e) {
    return exports.fromEither(E.left(e));
}
exports.left = left;
/**
 * @since 0.1.12
 */
exports.right = T.of;
/**
 * @since 0.1.12
 */
exports.rightState = T.fromState;
/**
 * @since 0.1.12
 */
function leftState(me) {
    return function (s) { return E.left(me(s)[0]); };
}
exports.leftState = leftState;
/**
 * @since 0.1.12
 */
exports.get = T.get;
/**
 * @since 0.1.12
 */
exports.put = T.put;
/**
 * @since 0.1.12
 */
exports.modify = T.modify;
/**
 * @since 0.1.12
 */
exports.gets = T.gets;
/**
 * @since 0.1.0
 */
exports.fromEither = T.fromM;
/**
 * @since 0.1.12
 */
function fromEitherK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return exports.fromEither(f.apply(void 0, a));
    };
}
exports.fromEitherK = fromEitherK;
/**
 * @since 0.1.12
 */
function chainEitherK(f) {
    return chain(fromEitherK(f));
}
exports.chainEitherK = chainEitherK;
/**
 * @since 0.1.12
 */
exports.stateEither = {
    URI: exports.URI,
    map: T.map,
    of: exports.right,
    ap: T.ap,
    chain: T.chain,
    throwError: left
};
var _a = pipeable_1.pipeable(exports.stateEither), ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map, filterOrElse = _a.filterOrElse, fromOption = _a.fromOption, fromPredicate = _a.fromPredicate;
exports.ap = ap;
exports.apFirst = apFirst;
exports.apSecond = apSecond;
exports.chain = chain;
exports.chainFirst = chainFirst;
exports.flatten = flatten;
exports.map = map;
exports.filterOrElse = filterOrElse;
exports.fromOption = fromOption;
exports.fromPredicate = fromPredicate;
