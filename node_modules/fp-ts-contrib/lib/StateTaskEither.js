"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var StateT_1 = require("fp-ts/lib/StateT");
var TE = require("fp-ts/lib/TaskEither");
var pipeable_1 = require("fp-ts/lib/pipeable");
var T = StateT_1.getStateM(TE.taskEither);
/**
 * @since 0.1.0
 */
exports.URI = 'StateTaskEither';
/**
 * @since 0.1.0
 */
function run(ma, s) {
    return ma(s)();
}
exports.run = run;
/**
 * @since 0.1.0
 */
exports.evalState = T.evalState;
/**
 * @since 0.1.0
 */
exports.execState = T.execState;
/**
 * @since 0.1.0
 */
function left(e) {
    return exports.fromTaskEither(TE.left(e));
}
exports.left = left;
/**
 * @since 0.1.0
 */
exports.right = T.of;
/**
 * @since 0.1.0
 */
function rightTask(ma) {
    return exports.fromTaskEither(TE.rightTask(ma));
}
exports.rightTask = rightTask;
/**
 * @since 0.1.0
 */
function leftTask(me) {
    return exports.fromTaskEither(TE.leftTask(me));
}
exports.leftTask = leftTask;
/**
 * @since 0.1.0
 */
exports.fromTaskEither = T.fromM;
/**
 * @since 0.1.0
 */
function fromIOEither(ma) {
    return exports.fromTaskEither(TE.fromIOEither(ma));
}
exports.fromIOEither = fromIOEither;
/**
 * @since 0.1.0
 */
function rightIO(ma) {
    return exports.fromTaskEither(TE.rightIO(ma));
}
exports.rightIO = rightIO;
/**
 * @since 0.1.0
 */
function leftIO(me) {
    return exports.fromTaskEither(TE.leftIO(me));
}
exports.leftIO = leftIO;
/**
 * @since 0.1.0
 */
exports.rightState = T.fromState;
/**
 * @since 0.1.0
 */
function leftState(me) {
    return function (s) { return TE.left(me(s)[0]); };
}
exports.leftState = leftState;
/**
 * @since 0.1.0
 */
exports.get = T.get;
/**
 * @since 0.1.0
 */
exports.put = T.put;
/**
 * @since 0.1.0
 */
exports.modify = T.modify;
/**
 * @since 0.1.0
 */
exports.gets = T.gets;
/**
 * @since 0.1.10
 */
function fromEitherK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return fromEither(f.apply(void 0, a));
    };
}
exports.fromEitherK = fromEitherK;
/**
 * @since 0.1.10
 */
function chainEitherK(f) {
    return chain(fromEitherK(f));
}
exports.chainEitherK = chainEitherK;
/**
 * @since 0.1.10
 */
function fromIOEitherK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return fromIOEither(f.apply(void 0, a));
    };
}
exports.fromIOEitherK = fromIOEitherK;
/**
 * @since 0.1.10
 */
function chainIOEitherK(f) {
    return chain(fromIOEitherK(f));
}
exports.chainIOEitherK = chainIOEitherK;
/**
 * @since 0.1.10
 */
function fromTaskEitherK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return exports.fromTaskEither(f.apply(void 0, a));
    };
}
exports.fromTaskEitherK = fromTaskEitherK;
/**
 * @since 0.1.10
 */
function chainTaskEitherK(f) {
    return chain(fromTaskEitherK(f));
}
exports.chainTaskEitherK = chainTaskEitherK;
/**
 * @since 0.1.0
 */
exports.stateTaskEither = {
    URI: exports.URI,
    map: T.map,
    of: exports.right,
    ap: T.ap,
    chain: T.chain,
    throwError: left
};
/**
 * Like `stateTaskEither` but `ap` is sequential
 * @since 0.1.0
 */
exports.stateTaskEitherSeq = __assign(__assign({}, exports.stateTaskEither), { ap: function (mab, ma) { return T.chain(mab, function (f) { return T.map(ma, f); }); } });
var _a = pipeable_1.pipeable(exports.stateTaskEither), ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map, filterOrElse = _a.filterOrElse, fromEither = _a.fromEither, fromOption = _a.fromOption, fromPredicate = _a.fromPredicate;
exports.ap = ap;
exports.apFirst = apFirst;
exports.apSecond = apSecond;
exports.chain = chain;
exports.chainFirst = chainFirst;
exports.flatten = flatten;
exports.map = map;
exports.filterOrElse = filterOrElse;
exports.fromEither = fromEither;
exports.fromOption = fromOption;
exports.fromPredicate = fromPredicate;
