/**
 * @since 0.1.0
 */
import * as I from "fp-ts/lib/IO";
import { Monad2 } from "fp-ts/lib/Monad";
import { Reader } from "fp-ts/lib/Reader";
import IO = I.IO;
declare module "fp-ts/lib/HKT" {
  interface URItoKind2<E, A> {
    ReaderIO: ReaderIO<E, A>;
  }
}
/**
 * @since 0.1.0
 */
export declare const URI = "ReaderIO";
/**
 * @since 0.1.0
 */
export declare type URI = typeof URI;
/**
 * @since 0.1.0
 */
export interface ReaderIO<R, A> {
  (r: R): IO<A>;
}
/**
 * @since 0.1.0
 */
export declare function run<R, A>(ma: ReaderIO<R, A>, r: R): A;
/**
 * @since 0.1.0
 */
export declare const fromReader: <R, A>(ma: Reader<R, A>) => ReaderIO<R, A>;
/**
 * @since 0.1.0
 */
export declare const fromIO: <R, A>(ma: IO<A>) => ReaderIO<R, A>;
/**
 * @since 0.1.0
 */
export declare const ask: <R>() => ReaderIO<R, R>;
/**
 * @since 0.1.0
 */
export declare const asks: <R, A>(f: (r: R) => A) => ReaderIO<R, A>;
/**
 * @since 0.1.0
 */
export declare function local<Q, R>(
  f: (f: Q) => R
): <A>(ma: ReaderIO<R, A>) => ReaderIO<Q, A>;
/**
 * @since 0.1.10
 */
export declare function fromIOK<A extends Array<unknown>, B>(
  f: (...a: A) => IO<B>
): <R>(...a: A) => ReaderIO<R, B>;
/**
 * @since 0.1.10
 */
export declare function chainIOK<A, B>(
  f: (a: A) => IO<B>
): <R>(ma: ReaderIO<R, A>) => ReaderIO<R, B>;
/**
 * @since 0.1.0
 */
export declare const readerIO: Monad2<URI>;
declare const ap: <E, A>(
    fa: ReaderIO<E, A>
  ) => <B>(fab: ReaderIO<E, (a: A) => B>) => ReaderIO<E, B>,
  apFirst: <E, B>(
    fb: ReaderIO<E, B>
  ) => <A>(fa: ReaderIO<E, A>) => ReaderIO<E, A>,
  apSecond: <E, B>(
    fb: ReaderIO<E, B>
  ) => <A>(fa: ReaderIO<E, A>) => ReaderIO<E, B>,
  chain: <E, A, B>(
    f: (a: A) => ReaderIO<E, B>
  ) => (ma: ReaderIO<E, A>) => ReaderIO<E, B>,
  chainFirst: <E, A, B>(
    f: (a: A) => ReaderIO<E, B>
  ) => (ma: ReaderIO<E, A>) => ReaderIO<E, A>,
  flatten: <E, A>(mma: ReaderIO<E, ReaderIO<E, A>>) => ReaderIO<E, A>,
  map: <A, B>(f: (a: A) => B) => <E>(fa: ReaderIO<E, A>) => ReaderIO<E, B>;
export {
  /**
   * @since 0.1.0
   */
  ap,
  /**
   * @since 0.1.0
   */
  apFirst,
  /**
   * @since 0.1.0
   */
  apSecond,
  /**
   * @since 0.1.0
   */
  chain,
  /**
   * @since 0.1.0
   */
  chainFirst,
  /**
   * @since 0.1.0
   */
  flatten,
  /**
   * @since 0.1.0
   */
  map
};
