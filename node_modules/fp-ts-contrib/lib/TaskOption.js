"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var Task_1 = require("fp-ts/lib/Task");
var Option_1 = require("fp-ts/lib/Option");
var OptionT_1 = require("fp-ts/lib/OptionT");
var pipeable_1 = require("fp-ts/lib/pipeable");
var Filterable_1 = require("fp-ts/lib/Filterable");
var T = OptionT_1.getOptionM(Task_1.task);
/**
 * @since 0.1.0
 */
exports.URI = 'TaskOption';
/**
 * @since 0.1.0
 */
exports.fromTask = T.fromM;
/**
 * @since 0.1.0
 */
exports.fromOption = Task_1.of;
/**
 * @since 0.1.0
 */
exports.none = T.none();
/**
 * @since 0.1.0
 */
exports.some = T.of;
/**
 * @since 0.1.0
 */
function fold(onNone, onSome) {
    return function (as) { return T.fold(as, onNone, onSome); };
}
exports.fold = fold;
/**
 * @since 0.1.0
 */
function getOrElse(onNone) {
    return function (as) { return T.getOrElse(as, onNone); };
}
exports.getOrElse = getOrElse;
/**
 * @since 0.1.4
 */
function fromNullable(a) {
    return exports.fromOption(Option_1.fromNullable(a));
}
exports.fromNullable = fromNullable;
/**
 * @since 0.1.4
 */
function fromTaskEither(ma) {
    return Task_1.task.map(ma, Option_1.fromEither);
}
exports.fromTaskEither = fromTaskEither;
/**
 * @since 0.1.4
 */
function toUndefined(ma) {
    return Task_1.task.map(ma, Option_1.toUndefined);
}
exports.toUndefined = toUndefined;
/**
 * @since 0.1.4
 */
function toNullable(ma) {
    return Task_1.task.map(ma, Option_1.toNullable);
}
exports.toNullable = toNullable;
/**
 * @since 0.1.4
 */
function chainTask(f) {
    return function (ma) { return T.chain(ma, function (a) { return exports.fromTask(f(a)); }); };
}
exports.chainTask = chainTask;
/**
 * @since 0.1.4
 */
function chainOption(f) {
    return Task_1.map(Option_1.chain(f));
}
exports.chainOption = chainOption;
/**
 * @since 0.1.5
 */
function mapNullable(f) {
    return Task_1.map(Option_1.mapNullable(f));
}
exports.mapNullable = mapNullable;
/**
 * @since 0.1.5
 */
function tryCatch(f) {
    return function () {
        return f().then(function (a) { return Option_1.some(a); }, function () { return Option_1.none; });
    };
}
exports.tryCatch = tryCatch;
/**
 * @since 0.1.10
 */
function fromOptionK(f) {
    return function () {
        var a = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            a[_i] = arguments[_i];
        }
        return exports.fromOption(f.apply(void 0, a));
    };
}
exports.fromOptionK = fromOptionK;
/**
 * @since 0.1.10
 */
function chainOptionK(f) {
    return chain(fromOptionK(f));
}
exports.chainOptionK = chainOptionK;
/**
 * @since 0.1.0
 */
exports.taskOption = __assign({ URI: exports.URI, of: exports.some, ap: T.ap, chain: T.chain, alt: T.alt, zero: T.none }, Filterable_1.getFilterableComposition(Task_1.task, Option_1.option));
var _a = pipeable_1.pipeable(exports.taskOption), alt = _a.alt, ap = _a.ap, apFirst = _a.apFirst, apSecond = _a.apSecond, chain = _a.chain, chainFirst = _a.chainFirst, flatten = _a.flatten, map = _a.map, partition = _a.partition, partitionMap = _a.partitionMap, filter = _a.filter, filterMap = _a.filterMap, compact = _a.compact, separate = _a.separate;
exports.alt = alt;
exports.ap = ap;
exports.apFirst = apFirst;
exports.apSecond = apSecond;
exports.chain = chain;
exports.chainFirst = chainFirst;
exports.flatten = flatten;
exports.map = map;
exports.partition = partition;
exports.partitionMap = partitionMap;
exports.filter = filter;
exports.filterMap = filterMap;
exports.compact = compact;
exports.separate = separate;
