/**
 * Adapted from https://github.com/purescript/purescript-lists
 *
 * @since 0.1.8
 */
import { Foldable1 } from "fp-ts/lib/Foldable";
import { Functor1 } from "fp-ts/lib/Functor";
import { Traversable1 } from "fp-ts/lib/Traversable";
import * as O from "fp-ts/lib/Option";
import { Predicate, Refinement } from "fp-ts/lib/function";
import * as Eq from "fp-ts/lib/Eq";
declare module "fp-ts/lib/HKT" {
  interface URItoKind<A> {
    List: List<A>;
  }
}
/**
 * @since 0.1.8
 */
export declare const URI = "List";
/**
 * @since 0.1.8
 */
export declare type URI = typeof URI;
/**
 * @since 0.1.8
 */
export interface Nil {
  readonly type: "Nil";
  readonly length: 0;
}
/**
 * @since 0.1.8
 */
export interface Cons<A> {
  readonly type: "Cons";
  readonly head: A;
  readonly tail: List<A>;
  readonly length: number;
}
/**
 * @since 0.1.8
 */
export declare type List<A> = Nil | Cons<A>;
/**
 * @since 0.1.8
 */
export declare const nil: List<never>;
/**
 * Attaches an element to the front of a list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.cons('a', L.nil), { type: 'Cons', head: 'a', tail: L.nil, length: 1 })
 *
 * @since 0.1.8
 */
export declare function cons<A>(head: A, tail: List<A>): List<A>;
/**
 * Creates a list with a single element.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.of('a'), L.cons('a', L.nil))
 *
 * @since 0.1.8
 */
export declare function of<A>(head: A): List<A>;
/**
 * Tests whether a list is an empty list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.strictEqual(L.isNil(L.nil), true)
 * assert.strictEqual(L.isNil(L.of(6)), false)
 *
 * @since 0.1.8
 */
export declare function isNil<A>(a: List<A>): a is Nil;
/**
 * Tests whether a list is a non empty list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.strictEqual(L.isCons(L.nil), false)
 * assert.strictEqual(L.isCons(L.of(1)), true)
 *
 * @since 0.1.8
 */
export declare function isCons<A>(a: List<A>): a is Cons<A>;
/**
 * Gets the first element in a list, or `None` if the list is empty.
 *
 * @example
 * import * as O from 'fp-ts/lib/Option'
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.head(L.nil), O.none)
 * assert.deepStrictEqual(L.head(L.cons('x', L.of('a'))), O.some('x'))
 *
 * @since 0.1.8
 */
export declare function head<A>(fa: List<A>): O.Option<A>;
/**
 * Gets all but the first element of a list, or `None` if the list is empty.
 *
 * @example
 * import * as O from 'fp-ts/lib/Option'
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.tail(L.nil), O.none)
 * assert.deepStrictEqual(L.tail(L.of('a')), O.some(L.nil))
 * assert.deepStrictEqual(L.tail(L.cons('x', L.of('a'))), O.some(L.of('a')))
 *
 * @since 0.1.8
 */
export declare function tail<A>(fa: List<A>): O.Option<List<A>>;
/**
 * Breaks a list into its first element and the remaining elements.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * const len: <A>(as: L.List<A>) => number = L.foldLeft(
 *   () => 0,
 *   (_, tail) => 1 + len(tail)
 * )
 * assert.deepStrictEqual(len(L.cons('a', L.of('b'))), 2)
 * @since 0.1.8
 */
export declare function foldLeft<A, B>(
  onNil: () => B,
  onCons: (head: A, tail: List<A>) => B
): (fa: List<A>) => B;
/**
 * Finds the first index for which a predicate holds.
 *
 * @example
 * import * as O from 'fp-ts/lib/Option'
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * const f = (a: number): boolean => a % 2 === 0
 * const findIndexEven = L.findIndex(f)
 * assert.deepStrictEqual(findIndexEven(L.nil), O.none)
 * assert.deepStrictEqual(findIndexEven(L.cons(1, L.of(2))), O.some(1))
 * assert.deepStrictEqual(findIndexEven(L.of(1)), O.none)
 *
 * @since 0.1.8
 */
export declare function findIndex<A>(
  predicate: Predicate<A>
): (fa: List<A>) => O.Option<number>;
/**
 * Reverse a list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.reverse(L.cons(1, L.cons(2, L.of(3)))), L.cons(3, L.cons(2, L.of(1))))
 *
 * @since 0.1.8
 */
export declare function reverse<A>(fa: List<A>): List<A>;
/**
 * Drops the specified number of elements from the front of a list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.dropLeft(1)(L.nil), L.nil)
 * assert.deepStrictEqual(L.dropLeft(1)(L.cons(1, L.of(2))), L.of(2))
 * assert.deepStrictEqual(L.dropLeft(3)(L.cons(1, L.of(2))), L.nil)
 *
 * @since 0.1.8
 */
export declare function dropLeft(n: number): <A>(fa: List<A>) => List<A>;
/**
 * Drops those elements from the front of a list which match a predicate.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * const isLTThree = (n: number) => n < 3
 * assert.deepStrictEqual(L.dropLeftWhile(isLTThree)(L.nil), L.nil)
 * assert.deepStrictEqual(L.dropLeftWhile(isLTThree)(L.cons(1, L.cons(2, L.of(3)))), L.of(3))
 * assert.deepStrictEqual(L.dropLeftWhile(isLTThree)(L.cons(1, L.of(2))), L.nil)
 *
 * @since 0.1.8
 */
export declare function dropLeftWhile<A, B extends A>(
  refinement: Refinement<A, B>
): (fa: List<A>) => List<B>;
export declare function dropLeftWhile<A>(
  predicate: Predicate<A>
): (fa: List<A>) => List<A>;
/**
 * Gets an array from a list.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.toArray(L.cons('a', L.of('b'))), ['a', 'b'])
 *
 * @since 0.1.8
 */
export declare function toArray<A>(fa: List<A>): Array<A>;
/**
 * Gets an array from a list in a reversed order.
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.toReversedArray(L.cons('a', L.of('b'))), ['b', 'a'])
 *
 * @since 0.1.8
 */
export declare function toReversedArray<A>(fa: List<A>): Array<A>;
/**
 * Creates a list from an array
 *
 * @example
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * assert.deepStrictEqual(L.fromArray([]), L.nil)
 * assert.deepStrictEqual(L.fromArray(['a', 'b']), L.cons('a', L.of('b')))
 *
 * @since 0.1.8
 */
export declare function fromArray<A>(as: Array<A>): List<A>;
/**
 * Derives an `Eq` over the `List` of a given element type from the `Eq` of that type.
 * The derived `Eq` defines two lists as equal if all elements of both lists
 * are compared equal pairwise with the given `E`. In case of lists of different
 * lengths, the result is non equality.
 *
 * @example
 * import { eqString } from 'fp-ts/lib/Eq'
 * import * as L from 'fp-ts-contrib/lib/List'
 *
 * const E = L.getEq(eqString)
 * assert.strictEqual(E.equals(L.cons('a', L.of('b')), L.cons('a', L.of('b'))), true)
 * assert.strictEqual(E.equals(L.of('x'), L.nil), false)
 *
 * @since 0.1.8
 */
export declare function getEq<A>(E: Eq.Eq<A>): Eq.Eq<List<A>>;
/**
 * @since 0.1.8
 */
export declare const list: Functor1<URI> & Foldable1<URI> & Traversable1<URI>;
declare const map: <A, B>(f: (a: A) => B) => (fa: List<A>) => List<B>,
  reduce: <A, B>(b: B, f: (b: B, a: A) => B) => (fa: List<A>) => B,
  foldMap: <M>(
    M: import("fp-ts/lib/Monoid").Monoid<M>
  ) => <A>(f: (a: A) => M) => (fa: List<A>) => M,
  reduceRight: <A, B>(b: B, f: (a: A, b: B) => B) => (fa: List<A>) => B;
export {
  /**
   * @since 0.1.8
   */
  map,
  /**
   * @since 0.1.8
   */
  reduce,
  /**
   * @since 0.1.8
   */
  foldMap,
  /**
   * @since 0.1.8
   */
  reduceRight
};
