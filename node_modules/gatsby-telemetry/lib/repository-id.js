"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getRepositoryId = exports.getRepoMetadata = void 0;

var _crypto = require("crypto");

var _path = require("path");

var _child_process = require("child_process");

var _gitUp = _interopRequireDefault(require("git-up"));

// there are no types for git-up, so we create our own
// based on https://github.com/IonicaBizau/git-up/blob/60e6a4ff93d50360bbb80953bfab2f82d3418900/lib/index.js#L8-L28
const typedGitUp = _gitUp.default;

const hash = str => (0, _crypto.createHash)(`sha256`).update(str).digest(`hex`);

const getRepoMetadata = url => {
  try {
    // This throws for invalid urls
    const {
      resource: provider,
      pathname
    } = typedGitUp(url);
    const res = {
      provider: hash(provider)
    };
    const userAndRepo = pathname.split(`/`);

    if (userAndRepo.length == 3) {
      res.owner = hash(userAndRepo[1]);
      res.name = hash(userAndRepo[2].replace(`.git`, ``));
    }

    return res;
  } catch (e) {// ignore
  }

  return null;
};

exports.getRepoMetadata = getRepoMetadata;

const getRepositoryIdFromPath = () => (0, _path.basename)(process.cwd());

const getGitRemoteWithGit = () => {
  try {
    // we may live multiple levels in git repo
    const originBuffer = (0, _child_process.execSync)(`git config --local --get remote.origin.url`, {
      timeout: 1000,
      stdio: `pipe`
    });
    const repo = String(originBuffer).trim();

    if (repo) {
      return {
        repositoryId: `git:${hash(repo)}`,
        repositoryData: getRepoMetadata(repo)
      };
    }
  } catch (e) {// ignore
  }

  return null;
};

const getRepositoryFromNetlifyEnv = () => {
  if (process.env.NETLIFY) {
    try {
      const url = process.env.REPOSITORY_URL;
      const repoPart = url.split(`@`)[1];

      if (repoPart) {
        return {
          repositoryId: `git:${hash(repoPart)}`,
          repositoryData: getRepoMetadata(url)
        };
      }
    } catch (e) {// ignore
    }
  }

  return null;
};

const getRepositoryId = () => {
  const gitRepo = getGitRemoteWithGit() || getRepositoryFromNetlifyEnv();

  if (gitRepo) {
    return gitRepo;
  } else {
    const repo = getRepositoryIdFromPath();
    return {
      repositoryId: `pwd:${hash(repo)}`
    };
  }
};

exports.getRepositoryId = getRepositoryId;